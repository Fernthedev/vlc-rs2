/* automatically generated by rust-bindgen 0.59.2 */

pub type size_t = libc::c_ulong;
pub type va_list = __builtin_va_list;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_long;
pub type __uint64_t = libc::c_ulong;
pub type __off_t = libc::c_long;
pub type __off64_t = libc::c_long;
pub type __ssize_t = libc::c_long;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = libc::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: libc::c_int,
    pub _IO_read_ptr: *mut libc::c_char,
    pub _IO_read_end: *mut libc::c_char,
    pub _IO_read_base: *mut libc::c_char,
    pub _IO_write_base: *mut libc::c_char,
    pub _IO_write_ptr: *mut libc::c_char,
    pub _IO_write_end: *mut libc::c_char,
    pub _IO_buf_base: *mut libc::c_char,
    pub _IO_buf_end: *mut libc::c_char,
    pub _IO_save_base: *mut libc::c_char,
    pub _IO_backup_base: *mut libc::c_char,
    pub _IO_save_end: *mut libc::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: libc::c_int,
    pub _flags2: libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: libc::c_ushort,
    pub _vtable_offset: libc::c_schar,
    pub _shortbuf: [libc::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut libc::c_void,
    pub __pad5: size_t,
    pub _mode: libc::c_int,
    pub _unused2: [libc::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::core::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::core::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type ssize_t = __ssize_t;
extern "C" {
    pub fn vsnprintf(
        __s: *mut libc::c_char,
        __maxlen: libc::c_ulong,
        __format: *const libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_instance_t {
    _unused: [u8; 0],
}
pub type libvlc_time_t = i64;
extern "C" {
    pub fn libvlc_errmsg() -> *const libc::c_char;
}
extern "C" {
    pub fn libvlc_clearerr();
}
extern "C" {
    pub fn libvlc_vprinterr(
        fmt: *const libc::c_char,
        ap: *mut __va_list_tag,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn libvlc_printerr(fmt: *const libc::c_char, ...) -> *const libc::c_char;
}
extern "C" {
    pub fn libvlc_new(
        argc: libc::c_int,
        argv: *const *const libc::c_char,
    ) -> *mut libvlc_instance_t;
}
extern "C" {
    pub fn libvlc_release(p_instance: *mut libvlc_instance_t);
}
extern "C" {
    pub fn libvlc_retain(p_instance: *mut libvlc_instance_t);
}
extern "C" {
    pub fn libvlc_add_intf(
        p_instance: *mut libvlc_instance_t,
        name: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_set_exit_handler(
        p_instance: *mut libvlc_instance_t,
        cb: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
        opaque: *mut libc::c_void,
    );
}
extern "C" {
    pub fn libvlc_set_user_agent(
        p_instance: *mut libvlc_instance_t,
        name: *const libc::c_char,
        http: *const libc::c_char,
    );
}
extern "C" {
    pub fn libvlc_set_app_id(
        p_instance: *mut libvlc_instance_t,
        id: *const libc::c_char,
        version: *const libc::c_char,
        icon: *const libc::c_char,
    );
}
extern "C" {
    pub fn libvlc_get_version() -> *const libc::c_char;
}
extern "C" {
    pub fn libvlc_get_compiler() -> *const libc::c_char;
}
extern "C" {
    pub fn libvlc_get_changeset() -> *const libc::c_char;
}
extern "C" {
    pub fn libvlc_free(ptr: *mut libc::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_manager_t {
    _unused: [u8; 0],
}
pub type libvlc_event_type_t = libc::c_int;
pub type libvlc_callback_t = ::core::option::Option<
    unsafe extern "C" fn(p_event: *const libvlc_event_t, p_data: *mut libc::c_void),
>;
extern "C" {
    pub fn libvlc_event_attach(
        p_event_manager: *mut libvlc_event_manager_t,
        i_event_type: libvlc_event_type_t,
        f_callback: libvlc_callback_t,
        user_data: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_event_detach(
        p_event_manager: *mut libvlc_event_manager_t,
        i_event_type: libvlc_event_type_t,
        f_callback: libvlc_callback_t,
        p_user_data: *mut libc::c_void,
    );
}
extern "C" {
    pub fn libvlc_event_type_name(event_type: libvlc_event_type_t) -> *const libc::c_char;
}
pub const libvlc_log_level_LIBVLC_DEBUG: libvlc_log_level = 0;
pub const libvlc_log_level_LIBVLC_NOTICE: libvlc_log_level = 2;
pub const libvlc_log_level_LIBVLC_WARNING: libvlc_log_level = 3;
pub const libvlc_log_level_LIBVLC_ERROR: libvlc_log_level = 4;
pub type libvlc_log_level = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vlc_log_t {
    _unused: [u8; 0],
}
pub type libvlc_log_t = vlc_log_t;
extern "C" {
    pub fn libvlc_log_get_context(
        ctx: *const libvlc_log_t,
        module: *mut *const libc::c_char,
        file: *mut *const libc::c_char,
        line: *mut libc::c_uint,
    );
}
extern "C" {
    pub fn libvlc_log_get_object(
        ctx: *const libvlc_log_t,
        name: *mut *const libc::c_char,
        header: *mut *const libc::c_char,
        id: *mut usize,
    );
}
pub type libvlc_log_cb = ::core::option::Option<
    unsafe extern "C" fn(
        data: *mut libc::c_void,
        level: libc::c_int,
        ctx: *const libvlc_log_t,
        fmt: *const libc::c_char,
        args: *mut __va_list_tag,
    ),
>;
extern "C" {
    pub fn libvlc_log_unset(p_instance: *mut libvlc_instance_t);
}
extern "C" {
    pub fn libvlc_log_set(
        p_instance: *mut libvlc_instance_t,
        cb: libvlc_log_cb,
        data: *mut libc::c_void,
    );
}
extern "C" {
    pub fn libvlc_log_set_file(p_instance: *mut libvlc_instance_t, stream: *mut FILE);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_module_description_t {
    pub psz_name: *mut libc::c_char,
    pub psz_shortname: *mut libc::c_char,
    pub psz_longname: *mut libc::c_char,
    pub psz_help: *mut libc::c_char,
    pub p_next: *mut libvlc_module_description_t,
}
#[test]
fn bindgen_test_layout_libvlc_module_description_t() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_module_description_t>(),
        40usize,
        concat!("Size of: ", stringify!(libvlc_module_description_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_module_description_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libvlc_module_description_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_module_description_t>())).psz_name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_module_description_t),
            "::",
            stringify!(psz_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_module_description_t>())).psz_shortname as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_module_description_t),
            "::",
            stringify!(psz_shortname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_module_description_t>())).psz_longname as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_module_description_t),
            "::",
            stringify!(psz_longname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_module_description_t>())).psz_help as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_module_description_t),
            "::",
            stringify!(psz_help)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_module_description_t>())).p_next as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_module_description_t),
            "::",
            stringify!(p_next)
        )
    );
}
extern "C" {
    pub fn libvlc_module_description_list_release(p_list: *mut libvlc_module_description_t);
}
extern "C" {
    pub fn libvlc_audio_filter_list_get(
        p_instance: *mut libvlc_instance_t,
    ) -> *mut libvlc_module_description_t;
}
extern "C" {
    pub fn libvlc_video_filter_list_get(
        p_instance: *mut libvlc_instance_t,
    ) -> *mut libvlc_module_description_t;
}
extern "C" {
    pub fn libvlc_clock() -> i64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_renderer_discoverer_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_rd_description_t {
    pub psz_name: *mut libc::c_char,
    pub psz_longname: *mut libc::c_char,
}
#[test]
fn bindgen_test_layout_libvlc_rd_description_t() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_rd_description_t>(),
        16usize,
        concat!("Size of: ", stringify!(libvlc_rd_description_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_rd_description_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libvlc_rd_description_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_rd_description_t>())).psz_name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_rd_description_t),
            "::",
            stringify!(psz_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_rd_description_t>())).psz_longname as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_rd_description_t),
            "::",
            stringify!(psz_longname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_renderer_item_t {
    _unused: [u8; 0],
}
extern "C" {
    pub fn libvlc_renderer_item_hold(
        p_item: *mut libvlc_renderer_item_t,
    ) -> *mut libvlc_renderer_item_t;
}
extern "C" {
    pub fn libvlc_renderer_item_release(p_item: *mut libvlc_renderer_item_t);
}
extern "C" {
    pub fn libvlc_renderer_item_name(p_item: *const libvlc_renderer_item_t) -> *const libc::c_char;
}
extern "C" {
    pub fn libvlc_renderer_item_type(p_item: *const libvlc_renderer_item_t) -> *const libc::c_char;
}
extern "C" {
    pub fn libvlc_renderer_item_icon_uri(
        p_item: *const libvlc_renderer_item_t,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn libvlc_renderer_item_flags(p_item: *const libvlc_renderer_item_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_renderer_discoverer_new(
        p_inst: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
    ) -> *mut libvlc_renderer_discoverer_t;
}
extern "C" {
    pub fn libvlc_renderer_discoverer_release(p_rd: *mut libvlc_renderer_discoverer_t);
}
extern "C" {
    pub fn libvlc_renderer_discoverer_start(p_rd: *mut libvlc_renderer_discoverer_t)
        -> libc::c_int;
}
extern "C" {
    pub fn libvlc_renderer_discoverer_stop(p_rd: *mut libvlc_renderer_discoverer_t);
}
extern "C" {
    pub fn libvlc_renderer_discoverer_event_manager(
        p_rd: *mut libvlc_renderer_discoverer_t,
    ) -> *mut libvlc_event_manager_t;
}
extern "C" {
    pub fn libvlc_renderer_discoverer_list_get(
        p_inst: *mut libvlc_instance_t,
        ppp_services: *mut *mut *mut libvlc_rd_description_t,
    ) -> size_t;
}
extern "C" {
    pub fn libvlc_renderer_discoverer_list_release(
        pp_services: *mut *mut libvlc_rd_description_t,
        i_count: size_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_media_t {
    _unused: [u8; 0],
}
pub const libvlc_meta_t_libvlc_meta_Title: libvlc_meta_t = 0;
pub const libvlc_meta_t_libvlc_meta_Artist: libvlc_meta_t = 1;
pub const libvlc_meta_t_libvlc_meta_Genre: libvlc_meta_t = 2;
pub const libvlc_meta_t_libvlc_meta_Copyright: libvlc_meta_t = 3;
pub const libvlc_meta_t_libvlc_meta_Album: libvlc_meta_t = 4;
pub const libvlc_meta_t_libvlc_meta_TrackNumber: libvlc_meta_t = 5;
pub const libvlc_meta_t_libvlc_meta_Description: libvlc_meta_t = 6;
pub const libvlc_meta_t_libvlc_meta_Rating: libvlc_meta_t = 7;
pub const libvlc_meta_t_libvlc_meta_Date: libvlc_meta_t = 8;
pub const libvlc_meta_t_libvlc_meta_Setting: libvlc_meta_t = 9;
pub const libvlc_meta_t_libvlc_meta_URL: libvlc_meta_t = 10;
pub const libvlc_meta_t_libvlc_meta_Language: libvlc_meta_t = 11;
pub const libvlc_meta_t_libvlc_meta_NowPlaying: libvlc_meta_t = 12;
pub const libvlc_meta_t_libvlc_meta_Publisher: libvlc_meta_t = 13;
pub const libvlc_meta_t_libvlc_meta_EncodedBy: libvlc_meta_t = 14;
pub const libvlc_meta_t_libvlc_meta_ArtworkURL: libvlc_meta_t = 15;
pub const libvlc_meta_t_libvlc_meta_TrackID: libvlc_meta_t = 16;
pub const libvlc_meta_t_libvlc_meta_TrackTotal: libvlc_meta_t = 17;
pub const libvlc_meta_t_libvlc_meta_Director: libvlc_meta_t = 18;
pub const libvlc_meta_t_libvlc_meta_Season: libvlc_meta_t = 19;
pub const libvlc_meta_t_libvlc_meta_Episode: libvlc_meta_t = 20;
pub const libvlc_meta_t_libvlc_meta_ShowName: libvlc_meta_t = 21;
pub const libvlc_meta_t_libvlc_meta_Actors: libvlc_meta_t = 22;
pub const libvlc_meta_t_libvlc_meta_AlbumArtist: libvlc_meta_t = 23;
pub const libvlc_meta_t_libvlc_meta_DiscNumber: libvlc_meta_t = 24;
pub const libvlc_meta_t_libvlc_meta_DiscTotal: libvlc_meta_t = 25;
pub type libvlc_meta_t = libc::c_uint;
pub const libvlc_state_t_libvlc_NothingSpecial: libvlc_state_t = 0;
pub const libvlc_state_t_libvlc_Opening: libvlc_state_t = 1;
pub const libvlc_state_t_libvlc_Buffering: libvlc_state_t = 2;
pub const libvlc_state_t_libvlc_Playing: libvlc_state_t = 3;
pub const libvlc_state_t_libvlc_Paused: libvlc_state_t = 4;
pub const libvlc_state_t_libvlc_Stopped: libvlc_state_t = 5;
pub const libvlc_state_t_libvlc_Ended: libvlc_state_t = 6;
pub const libvlc_state_t_libvlc_Error: libvlc_state_t = 7;
pub type libvlc_state_t = libc::c_uint;
pub const libvlc_media_option_trusted: libc::c_uint = 2;
pub const libvlc_media_option_unique: libc::c_uint = 256;
pub type _bindgen_ty_1 = libc::c_uint;
pub const libvlc_track_type_t_libvlc_track_unknown: libvlc_track_type_t = -1;
pub const libvlc_track_type_t_libvlc_track_audio: libvlc_track_type_t = 0;
pub const libvlc_track_type_t_libvlc_track_video: libvlc_track_type_t = 1;
pub const libvlc_track_type_t_libvlc_track_text: libvlc_track_type_t = 2;
pub type libvlc_track_type_t = libc::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_media_stats_t {
    pub i_read_bytes: libc::c_int,
    pub f_input_bitrate: f32,
    pub i_demux_read_bytes: libc::c_int,
    pub f_demux_bitrate: f32,
    pub i_demux_corrupted: libc::c_int,
    pub i_demux_discontinuity: libc::c_int,
    pub i_decoded_video: libc::c_int,
    pub i_decoded_audio: libc::c_int,
    pub i_displayed_pictures: libc::c_int,
    pub i_lost_pictures: libc::c_int,
    pub i_played_abuffers: libc::c_int,
    pub i_lost_abuffers: libc::c_int,
    pub i_sent_packets: libc::c_int,
    pub i_sent_bytes: libc::c_int,
    pub f_send_bitrate: f32,
}
#[test]
fn bindgen_test_layout_libvlc_media_stats_t() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_media_stats_t>(),
        60usize,
        concat!("Size of: ", stringify!(libvlc_media_stats_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_media_stats_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libvlc_media_stats_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_stats_t>())).i_read_bytes as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_stats_t),
            "::",
            stringify!(i_read_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_stats_t>())).f_input_bitrate as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_stats_t),
            "::",
            stringify!(f_input_bitrate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_stats_t>())).i_demux_read_bytes as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_stats_t),
            "::",
            stringify!(i_demux_read_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_stats_t>())).f_demux_bitrate as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_stats_t),
            "::",
            stringify!(f_demux_bitrate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_stats_t>())).i_demux_corrupted as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_stats_t),
            "::",
            stringify!(i_demux_corrupted)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_stats_t>())).i_demux_discontinuity as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_stats_t),
            "::",
            stringify!(i_demux_discontinuity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_stats_t>())).i_decoded_video as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_stats_t),
            "::",
            stringify!(i_decoded_video)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_stats_t>())).i_decoded_audio as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_stats_t),
            "::",
            stringify!(i_decoded_audio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_stats_t>())).i_displayed_pictures as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_stats_t),
            "::",
            stringify!(i_displayed_pictures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_stats_t>())).i_lost_pictures as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_stats_t),
            "::",
            stringify!(i_lost_pictures)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_stats_t>())).i_played_abuffers as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_stats_t),
            "::",
            stringify!(i_played_abuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_stats_t>())).i_lost_abuffers as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_stats_t),
            "::",
            stringify!(i_lost_abuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_stats_t>())).i_sent_packets as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_stats_t),
            "::",
            stringify!(i_sent_packets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_stats_t>())).i_sent_bytes as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_stats_t),
            "::",
            stringify!(i_sent_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_stats_t>())).f_send_bitrate as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_stats_t),
            "::",
            stringify!(f_send_bitrate)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct libvlc_media_track_info_t {
    pub i_codec: u32,
    pub i_id: libc::c_int,
    pub i_type: libvlc_track_type_t,
    pub i_profile: libc::c_int,
    pub i_level: libc::c_int,
    pub u: libvlc_media_track_info_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union libvlc_media_track_info_t__bindgen_ty_1 {
    pub audio: libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_1,
    pub video: libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_1 {
    pub i_channels: libc::c_uint,
    pub i_rate: libc::c_uint,
}
#[test]
fn bindgen_test_layout_libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_1>()))
                .i_channels as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(i_channels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_1>()))
                .i_rate as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(i_rate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_2 {
    pub i_height: libc::c_uint,
    pub i_width: libc::c_uint,
}
#[test]
fn bindgen_test_layout_libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_2>()))
                .i_height as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(i_height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_2>()))
                .i_width as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_info_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(i_width)
        )
    );
}
#[test]
fn bindgen_test_layout_libvlc_media_track_info_t__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_media_track_info_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_media_track_info_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_media_track_info_t__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_media_track_info_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_track_info_t__bindgen_ty_1>())).audio as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_info_t__bindgen_ty_1),
            "::",
            stringify!(audio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_track_info_t__bindgen_ty_1>())).video as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_info_t__bindgen_ty_1),
            "::",
            stringify!(video)
        )
    );
}
#[test]
fn bindgen_test_layout_libvlc_media_track_info_t() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_media_track_info_t>(),
        28usize,
        concat!("Size of: ", stringify!(libvlc_media_track_info_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_media_track_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libvlc_media_track_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_track_info_t>())).i_codec as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_info_t),
            "::",
            stringify!(i_codec)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_media_track_info_t>())).i_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_info_t),
            "::",
            stringify!(i_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_track_info_t>())).i_type as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_info_t),
            "::",
            stringify!(i_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_track_info_t>())).i_profile as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_info_t),
            "::",
            stringify!(i_profile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_track_info_t>())).i_level as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_info_t),
            "::",
            stringify!(i_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_media_track_info_t>())).u as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_info_t),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_audio_track_t {
    pub i_channels: libc::c_uint,
    pub i_rate: libc::c_uint,
}
#[test]
fn bindgen_test_layout_libvlc_audio_track_t() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_audio_track_t>(),
        8usize,
        concat!("Size of: ", stringify!(libvlc_audio_track_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_audio_track_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libvlc_audio_track_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_audio_track_t>())).i_channels as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_audio_track_t),
            "::",
            stringify!(i_channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_audio_track_t>())).i_rate as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_audio_track_t),
            "::",
            stringify!(i_rate)
        )
    );
}
pub const libvlc_video_orient_t_libvlc_video_orient_top_left: libvlc_video_orient_t = 0;
pub const libvlc_video_orient_t_libvlc_video_orient_top_right: libvlc_video_orient_t = 1;
pub const libvlc_video_orient_t_libvlc_video_orient_bottom_left: libvlc_video_orient_t = 2;
pub const libvlc_video_orient_t_libvlc_video_orient_bottom_right: libvlc_video_orient_t = 3;
pub const libvlc_video_orient_t_libvlc_video_orient_left_top: libvlc_video_orient_t = 4;
pub const libvlc_video_orient_t_libvlc_video_orient_left_bottom: libvlc_video_orient_t = 5;
pub const libvlc_video_orient_t_libvlc_video_orient_right_top: libvlc_video_orient_t = 6;
pub const libvlc_video_orient_t_libvlc_video_orient_right_bottom: libvlc_video_orient_t = 7;
pub type libvlc_video_orient_t = libc::c_uint;
pub const libvlc_video_projection_t_libvlc_video_projection_rectangular: libvlc_video_projection_t =
    0;
pub const libvlc_video_projection_t_libvlc_video_projection_equirectangular:
    libvlc_video_projection_t = 1;
pub const libvlc_video_projection_t_libvlc_video_projection_cubemap_layout_standard:
    libvlc_video_projection_t = 256;
pub type libvlc_video_projection_t = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_video_viewpoint_t {
    pub f_yaw: f32,
    pub f_pitch: f32,
    pub f_roll: f32,
    pub f_field_of_view: f32,
}
#[test]
fn bindgen_test_layout_libvlc_video_viewpoint_t() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_video_viewpoint_t>(),
        16usize,
        concat!("Size of: ", stringify!(libvlc_video_viewpoint_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_video_viewpoint_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libvlc_video_viewpoint_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_video_viewpoint_t>())).f_yaw as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_video_viewpoint_t),
            "::",
            stringify!(f_yaw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_video_viewpoint_t>())).f_pitch as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_video_viewpoint_t),
            "::",
            stringify!(f_pitch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_video_viewpoint_t>())).f_roll as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_video_viewpoint_t),
            "::",
            stringify!(f_roll)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_video_viewpoint_t>())).f_field_of_view as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_video_viewpoint_t),
            "::",
            stringify!(f_field_of_view)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_video_track_t {
    pub i_height: libc::c_uint,
    pub i_width: libc::c_uint,
    pub i_sar_num: libc::c_uint,
    pub i_sar_den: libc::c_uint,
    pub i_frame_rate_num: libc::c_uint,
    pub i_frame_rate_den: libc::c_uint,
    pub i_orientation: libvlc_video_orient_t,
    pub i_projection: libvlc_video_projection_t,
    pub pose: libvlc_video_viewpoint_t,
}
#[test]
fn bindgen_test_layout_libvlc_video_track_t() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_video_track_t>(),
        48usize,
        concat!("Size of: ", stringify!(libvlc_video_track_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_video_track_t>(),
        4usize,
        concat!("Alignment of ", stringify!(libvlc_video_track_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_video_track_t>())).i_height as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_video_track_t),
            "::",
            stringify!(i_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_video_track_t>())).i_width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_video_track_t),
            "::",
            stringify!(i_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_video_track_t>())).i_sar_num as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_video_track_t),
            "::",
            stringify!(i_sar_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_video_track_t>())).i_sar_den as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_video_track_t),
            "::",
            stringify!(i_sar_den)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_video_track_t>())).i_frame_rate_num as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_video_track_t),
            "::",
            stringify!(i_frame_rate_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_video_track_t>())).i_frame_rate_den as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_video_track_t),
            "::",
            stringify!(i_frame_rate_den)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_video_track_t>())).i_orientation as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_video_track_t),
            "::",
            stringify!(i_orientation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_video_track_t>())).i_projection as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_video_track_t),
            "::",
            stringify!(i_projection)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_video_track_t>())).pose as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_video_track_t),
            "::",
            stringify!(pose)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_subtitle_track_t {
    pub psz_encoding: *mut libc::c_char,
}
#[test]
fn bindgen_test_layout_libvlc_subtitle_track_t() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_subtitle_track_t>(),
        8usize,
        concat!("Size of: ", stringify!(libvlc_subtitle_track_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_subtitle_track_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libvlc_subtitle_track_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_subtitle_track_t>())).psz_encoding as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_subtitle_track_t),
            "::",
            stringify!(psz_encoding)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct libvlc_media_track_t {
    pub i_codec: u32,
    pub i_original_fourcc: u32,
    pub i_id: libc::c_int,
    pub i_type: libvlc_track_type_t,
    pub i_profile: libc::c_int,
    pub i_level: libc::c_int,
    pub __bindgen_anon_1: libvlc_media_track_t__bindgen_ty_1,
    pub i_bitrate: libc::c_uint,
    pub psz_language: *mut libc::c_char,
    pub psz_description: *mut libc::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union libvlc_media_track_t__bindgen_ty_1 {
    pub audio: *mut libvlc_audio_track_t,
    pub video: *mut libvlc_video_track_t,
    pub subtitle: *mut libvlc_subtitle_track_t,
}
#[test]
fn bindgen_test_layout_libvlc_media_track_t__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_media_track_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(libvlc_media_track_t__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_media_track_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_media_track_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_track_t__bindgen_ty_1>())).audio as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_t__bindgen_ty_1),
            "::",
            stringify!(audio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_track_t__bindgen_ty_1>())).video as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_t__bindgen_ty_1),
            "::",
            stringify!(video)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_track_t__bindgen_ty_1>())).subtitle as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_t__bindgen_ty_1),
            "::",
            stringify!(subtitle)
        )
    );
}
#[test]
fn bindgen_test_layout_libvlc_media_track_t() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_media_track_t>(),
        56usize,
        concat!("Size of: ", stringify!(libvlc_media_track_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_media_track_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libvlc_media_track_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_media_track_t>())).i_codec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_t),
            "::",
            stringify!(i_codec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_track_t>())).i_original_fourcc as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_t),
            "::",
            stringify!(i_original_fourcc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_media_track_t>())).i_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_t),
            "::",
            stringify!(i_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_media_track_t>())).i_type as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_t),
            "::",
            stringify!(i_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_media_track_t>())).i_profile as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_t),
            "::",
            stringify!(i_profile)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_media_track_t>())).i_level as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_t),
            "::",
            stringify!(i_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_media_track_t>())).i_bitrate as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_t),
            "::",
            stringify!(i_bitrate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_track_t>())).psz_language as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_t),
            "::",
            stringify!(psz_language)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_track_t>())).psz_description as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_track_t),
            "::",
            stringify!(psz_description)
        )
    );
}
pub const libvlc_media_type_t_libvlc_media_type_unknown: libvlc_media_type_t = 0;
pub const libvlc_media_type_t_libvlc_media_type_file: libvlc_media_type_t = 1;
pub const libvlc_media_type_t_libvlc_media_type_directory: libvlc_media_type_t = 2;
pub const libvlc_media_type_t_libvlc_media_type_disc: libvlc_media_type_t = 3;
pub const libvlc_media_type_t_libvlc_media_type_stream: libvlc_media_type_t = 4;
pub const libvlc_media_type_t_libvlc_media_type_playlist: libvlc_media_type_t = 5;
pub type libvlc_media_type_t = libc::c_uint;
pub const libvlc_media_parse_flag_t_libvlc_media_parse_local: libvlc_media_parse_flag_t = 0;
pub const libvlc_media_parse_flag_t_libvlc_media_parse_network: libvlc_media_parse_flag_t = 1;
pub const libvlc_media_parse_flag_t_libvlc_media_fetch_local: libvlc_media_parse_flag_t = 2;
pub const libvlc_media_parse_flag_t_libvlc_media_fetch_network: libvlc_media_parse_flag_t = 4;
pub const libvlc_media_parse_flag_t_libvlc_media_do_interact: libvlc_media_parse_flag_t = 8;
pub type libvlc_media_parse_flag_t = libc::c_uint;
pub const libvlc_media_parsed_status_t_libvlc_media_parsed_status_skipped:
    libvlc_media_parsed_status_t = 1;
pub const libvlc_media_parsed_status_t_libvlc_media_parsed_status_failed:
    libvlc_media_parsed_status_t = 2;
pub const libvlc_media_parsed_status_t_libvlc_media_parsed_status_timeout:
    libvlc_media_parsed_status_t = 3;
pub const libvlc_media_parsed_status_t_libvlc_media_parsed_status_done:
    libvlc_media_parsed_status_t = 4;
pub type libvlc_media_parsed_status_t = libc::c_uint;
pub const libvlc_media_slave_type_t_libvlc_media_slave_type_subtitle: libvlc_media_slave_type_t = 0;
pub const libvlc_media_slave_type_t_libvlc_media_slave_type_audio: libvlc_media_slave_type_t = 1;
pub type libvlc_media_slave_type_t = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_media_slave_t {
    pub psz_uri: *mut libc::c_char,
    pub i_type: libvlc_media_slave_type_t,
    pub i_priority: libc::c_uint,
}
#[test]
fn bindgen_test_layout_libvlc_media_slave_t() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_media_slave_t>(),
        16usize,
        concat!("Size of: ", stringify!(libvlc_media_slave_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_media_slave_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libvlc_media_slave_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_media_slave_t>())).psz_uri as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_slave_t),
            "::",
            stringify!(psz_uri)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_media_slave_t>())).i_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_slave_t),
            "::",
            stringify!(i_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_slave_t>())).i_priority as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_slave_t),
            "::",
            stringify!(i_priority)
        )
    );
}
pub type libvlc_media_open_cb = ::core::option::Option<
    unsafe extern "C" fn(
        opaque: *mut libc::c_void,
        datap: *mut *mut libc::c_void,
        sizep: *mut u64,
    ) -> libc::c_int,
>;
pub type libvlc_media_read_cb = ::core::option::Option<
    unsafe extern "C" fn(
        opaque: *mut libc::c_void,
        buf: *mut libc::c_uchar,
        len: size_t,
    ) -> ssize_t,
>;
pub type libvlc_media_seek_cb = ::core::option::Option<
    unsafe extern "C" fn(opaque: *mut libc::c_void, offset: u64) -> libc::c_int,
>;
pub type libvlc_media_close_cb =
    ::core::option::Option<unsafe extern "C" fn(opaque: *mut libc::c_void)>;
extern "C" {
    pub fn libvlc_media_new_location(
        p_instance: *mut libvlc_instance_t,
        psz_mrl: *const libc::c_char,
    ) -> *mut libvlc_media_t;
}
extern "C" {
    pub fn libvlc_media_new_path(
        p_instance: *mut libvlc_instance_t,
        path: *const libc::c_char,
    ) -> *mut libvlc_media_t;
}
extern "C" {
    pub fn libvlc_media_new_fd(
        p_instance: *mut libvlc_instance_t,
        fd: libc::c_int,
    ) -> *mut libvlc_media_t;
}
extern "C" {
    pub fn libvlc_media_new_callbacks(
        instance: *mut libvlc_instance_t,
        open_cb: libvlc_media_open_cb,
        read_cb: libvlc_media_read_cb,
        seek_cb: libvlc_media_seek_cb,
        close_cb: libvlc_media_close_cb,
        opaque: *mut libc::c_void,
    ) -> *mut libvlc_media_t;
}
extern "C" {
    pub fn libvlc_media_new_as_node(
        p_instance: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
    ) -> *mut libvlc_media_t;
}
extern "C" {
    pub fn libvlc_media_add_option(p_md: *mut libvlc_media_t, psz_options: *const libc::c_char);
}
extern "C" {
    pub fn libvlc_media_add_option_flag(
        p_md: *mut libvlc_media_t,
        psz_options: *const libc::c_char,
        i_flags: libc::c_uint,
    );
}
extern "C" {
    pub fn libvlc_media_retain(p_md: *mut libvlc_media_t);
}
extern "C" {
    pub fn libvlc_media_release(p_md: *mut libvlc_media_t);
}
extern "C" {
    pub fn libvlc_media_get_mrl(p_md: *mut libvlc_media_t) -> *mut libc::c_char;
}
extern "C" {
    pub fn libvlc_media_duplicate(p_md: *mut libvlc_media_t) -> *mut libvlc_media_t;
}
extern "C" {
    pub fn libvlc_media_get_meta(
        p_md: *mut libvlc_media_t,
        e_meta: libvlc_meta_t,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn libvlc_media_set_meta(
        p_md: *mut libvlc_media_t,
        e_meta: libvlc_meta_t,
        psz_value: *const libc::c_char,
    );
}
extern "C" {
    pub fn libvlc_media_save_meta(p_md: *mut libvlc_media_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_get_state(p_md: *mut libvlc_media_t) -> libvlc_state_t;
}
extern "C" {
    pub fn libvlc_media_get_stats(
        p_md: *mut libvlc_media_t,
        p_stats: *mut libvlc_media_stats_t,
    ) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_media_list_t {
    _unused: [u8; 0],
}
extern "C" {
    pub fn libvlc_media_subitems(p_md: *mut libvlc_media_t) -> *mut libvlc_media_list_t;
}
extern "C" {
    pub fn libvlc_media_event_manager(p_md: *mut libvlc_media_t) -> *mut libvlc_event_manager_t;
}
extern "C" {
    pub fn libvlc_media_get_duration(p_md: *mut libvlc_media_t) -> libvlc_time_t;
}
extern "C" {
    pub fn libvlc_media_parse_with_options(
        p_md: *mut libvlc_media_t,
        parse_flag: libvlc_media_parse_flag_t,
        timeout: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_parse_stop(p_md: *mut libvlc_media_t);
}
extern "C" {
    pub fn libvlc_media_get_parsed_status(
        p_md: *mut libvlc_media_t,
    ) -> libvlc_media_parsed_status_t;
}
extern "C" {
    pub fn libvlc_media_set_user_data(
        p_md: *mut libvlc_media_t,
        p_new_user_data: *mut libc::c_void,
    );
}
extern "C" {
    pub fn libvlc_media_get_user_data(p_md: *mut libvlc_media_t) -> *mut libc::c_void;
}
extern "C" {
    pub fn libvlc_media_tracks_get(
        p_md: *mut libvlc_media_t,
        tracks: *mut *mut *mut libvlc_media_track_t,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn libvlc_media_get_codec_description(
        i_type: libvlc_track_type_t,
        i_codec: u32,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn libvlc_media_tracks_release(
        p_tracks: *mut *mut libvlc_media_track_t,
        i_count: libc::c_uint,
    );
}
extern "C" {
    pub fn libvlc_media_get_type(p_md: *mut libvlc_media_t) -> libvlc_media_type_t;
}
extern "C" {
    pub fn libvlc_media_slaves_add(
        p_md: *mut libvlc_media_t,
        i_type: libvlc_media_slave_type_t,
        i_priority: libc::c_uint,
        psz_uri: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_slaves_clear(p_md: *mut libvlc_media_t);
}
extern "C" {
    pub fn libvlc_media_slaves_get(
        p_md: *mut libvlc_media_t,
        ppp_slaves: *mut *mut *mut libvlc_media_slave_t,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn libvlc_media_slaves_release(
        pp_slaves: *mut *mut libvlc_media_slave_t,
        i_count: libc::c_uint,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_media_player_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_track_description_t {
    pub i_id: libc::c_int,
    pub psz_name: *mut libc::c_char,
    pub p_next: *mut libvlc_track_description_t,
}
#[test]
fn bindgen_test_layout_libvlc_track_description_t() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_track_description_t>(),
        24usize,
        concat!("Size of: ", stringify!(libvlc_track_description_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_track_description_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libvlc_track_description_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_track_description_t>())).i_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_track_description_t),
            "::",
            stringify!(i_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_track_description_t>())).psz_name as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_track_description_t),
            "::",
            stringify!(psz_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_track_description_t>())).p_next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_track_description_t),
            "::",
            stringify!(p_next)
        )
    );
}
pub const libvlc_title_menu: libc::c_uint = 1;
pub const libvlc_title_interactive: libc::c_uint = 2;
pub type _bindgen_ty_2 = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_title_description_t {
    pub i_duration: i64,
    pub psz_name: *mut libc::c_char,
    pub i_flags: libc::c_uint,
}
#[test]
fn bindgen_test_layout_libvlc_title_description_t() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_title_description_t>(),
        24usize,
        concat!("Size of: ", stringify!(libvlc_title_description_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_title_description_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libvlc_title_description_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_title_description_t>())).i_duration as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_title_description_t),
            "::",
            stringify!(i_duration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_title_description_t>())).psz_name as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_title_description_t),
            "::",
            stringify!(psz_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_title_description_t>())).i_flags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_title_description_t),
            "::",
            stringify!(i_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_chapter_description_t {
    pub i_time_offset: i64,
    pub i_duration: i64,
    pub psz_name: *mut libc::c_char,
}
#[test]
fn bindgen_test_layout_libvlc_chapter_description_t() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_chapter_description_t>(),
        24usize,
        concat!("Size of: ", stringify!(libvlc_chapter_description_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_chapter_description_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libvlc_chapter_description_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_chapter_description_t>())).i_time_offset as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_chapter_description_t),
            "::",
            stringify!(i_time_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_chapter_description_t>())).i_duration as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_chapter_description_t),
            "::",
            stringify!(i_duration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_chapter_description_t>())).psz_name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_chapter_description_t),
            "::",
            stringify!(psz_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_audio_output_t {
    pub psz_name: *mut libc::c_char,
    pub psz_description: *mut libc::c_char,
    pub p_next: *mut libvlc_audio_output_t,
}
#[test]
fn bindgen_test_layout_libvlc_audio_output_t() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_audio_output_t>(),
        24usize,
        concat!("Size of: ", stringify!(libvlc_audio_output_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_audio_output_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libvlc_audio_output_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_audio_output_t>())).psz_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_audio_output_t),
            "::",
            stringify!(psz_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_audio_output_t>())).psz_description as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_audio_output_t),
            "::",
            stringify!(psz_description)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_audio_output_t>())).p_next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_audio_output_t),
            "::",
            stringify!(p_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_audio_output_device_t {
    pub p_next: *mut libvlc_audio_output_device_t,
    pub psz_device: *mut libc::c_char,
    pub psz_description: *mut libc::c_char,
}
#[test]
fn bindgen_test_layout_libvlc_audio_output_device_t() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_audio_output_device_t>(),
        24usize,
        concat!("Size of: ", stringify!(libvlc_audio_output_device_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_audio_output_device_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libvlc_audio_output_device_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_audio_output_device_t>())).p_next as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_audio_output_device_t),
            "::",
            stringify!(p_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_audio_output_device_t>())).psz_device as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_audio_output_device_t),
            "::",
            stringify!(psz_device)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_audio_output_device_t>())).psz_description as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_audio_output_device_t),
            "::",
            stringify!(psz_description)
        )
    );
}
pub const libvlc_video_marquee_option_t_libvlc_marquee_Enable: libvlc_video_marquee_option_t = 0;
pub const libvlc_video_marquee_option_t_libvlc_marquee_Text: libvlc_video_marquee_option_t = 1;
pub const libvlc_video_marquee_option_t_libvlc_marquee_Color: libvlc_video_marquee_option_t = 2;
pub const libvlc_video_marquee_option_t_libvlc_marquee_Opacity: libvlc_video_marquee_option_t = 3;
pub const libvlc_video_marquee_option_t_libvlc_marquee_Position: libvlc_video_marquee_option_t = 4;
pub const libvlc_video_marquee_option_t_libvlc_marquee_Refresh: libvlc_video_marquee_option_t = 5;
pub const libvlc_video_marquee_option_t_libvlc_marquee_Size: libvlc_video_marquee_option_t = 6;
pub const libvlc_video_marquee_option_t_libvlc_marquee_Timeout: libvlc_video_marquee_option_t = 7;
pub const libvlc_video_marquee_option_t_libvlc_marquee_X: libvlc_video_marquee_option_t = 8;
pub const libvlc_video_marquee_option_t_libvlc_marquee_Y: libvlc_video_marquee_option_t = 9;
pub type libvlc_video_marquee_option_t = libc::c_uint;
pub const libvlc_navigate_mode_t_libvlc_navigate_activate: libvlc_navigate_mode_t = 0;
pub const libvlc_navigate_mode_t_libvlc_navigate_up: libvlc_navigate_mode_t = 1;
pub const libvlc_navigate_mode_t_libvlc_navigate_down: libvlc_navigate_mode_t = 2;
pub const libvlc_navigate_mode_t_libvlc_navigate_left: libvlc_navigate_mode_t = 3;
pub const libvlc_navigate_mode_t_libvlc_navigate_right: libvlc_navigate_mode_t = 4;
pub const libvlc_navigate_mode_t_libvlc_navigate_popup: libvlc_navigate_mode_t = 5;
pub type libvlc_navigate_mode_t = libc::c_uint;
pub const libvlc_position_t_libvlc_position_disable: libvlc_position_t = -1;
pub const libvlc_position_t_libvlc_position_center: libvlc_position_t = 0;
pub const libvlc_position_t_libvlc_position_left: libvlc_position_t = 1;
pub const libvlc_position_t_libvlc_position_right: libvlc_position_t = 2;
pub const libvlc_position_t_libvlc_position_top: libvlc_position_t = 3;
pub const libvlc_position_t_libvlc_position_top_left: libvlc_position_t = 4;
pub const libvlc_position_t_libvlc_position_top_right: libvlc_position_t = 5;
pub const libvlc_position_t_libvlc_position_bottom: libvlc_position_t = 6;
pub const libvlc_position_t_libvlc_position_bottom_left: libvlc_position_t = 7;
pub const libvlc_position_t_libvlc_position_bottom_right: libvlc_position_t = 8;
pub type libvlc_position_t = libc::c_int;
pub const libvlc_teletext_key_t_libvlc_teletext_key_red: libvlc_teletext_key_t = 7471104;
pub const libvlc_teletext_key_t_libvlc_teletext_key_green: libvlc_teletext_key_t = 6750208;
pub const libvlc_teletext_key_t_libvlc_teletext_key_yellow: libvlc_teletext_key_t = 7929856;
pub const libvlc_teletext_key_t_libvlc_teletext_key_blue: libvlc_teletext_key_t = 6422528;
pub const libvlc_teletext_key_t_libvlc_teletext_key_index: libvlc_teletext_key_t = 6881280;
pub type libvlc_teletext_key_t = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_equalizer_t {
    _unused: [u8; 0],
}
extern "C" {
    pub fn libvlc_media_player_new(
        p_libvlc_instance: *mut libvlc_instance_t,
    ) -> *mut libvlc_media_player_t;
}
extern "C" {
    pub fn libvlc_media_player_new_from_media(
        p_md: *mut libvlc_media_t,
    ) -> *mut libvlc_media_player_t;
}
extern "C" {
    pub fn libvlc_media_player_release(p_mi: *mut libvlc_media_player_t);
}
extern "C" {
    pub fn libvlc_media_player_retain(p_mi: *mut libvlc_media_player_t);
}
extern "C" {
    pub fn libvlc_media_player_set_media(
        p_mi: *mut libvlc_media_player_t,
        p_md: *mut libvlc_media_t,
    );
}
extern "C" {
    pub fn libvlc_media_player_get_media(p_mi: *mut libvlc_media_player_t) -> *mut libvlc_media_t;
}
extern "C" {
    pub fn libvlc_media_player_event_manager(
        p_mi: *mut libvlc_media_player_t,
    ) -> *mut libvlc_event_manager_t;
}
extern "C" {
    pub fn libvlc_media_player_is_playing(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_player_play(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_player_set_pause(mp: *mut libvlc_media_player_t, do_pause: libc::c_int);
}
extern "C" {
    pub fn libvlc_media_player_pause(p_mi: *mut libvlc_media_player_t);
}
extern "C" {
    pub fn libvlc_media_player_stop(p_mi: *mut libvlc_media_player_t);
}
extern "C" {
    pub fn libvlc_media_player_set_renderer(
        p_mi: *mut libvlc_media_player_t,
        p_item: *mut libvlc_renderer_item_t,
    ) -> libc::c_int;
}
pub type libvlc_video_lock_cb = ::core::option::Option<
    unsafe extern "C" fn(
        opaque: *mut libc::c_void,
        planes: *mut *mut libc::c_void,
    ) -> *mut libc::c_void,
>;
pub type libvlc_video_unlock_cb = ::core::option::Option<
    unsafe extern "C" fn(
        opaque: *mut libc::c_void,
        picture: *mut libc::c_void,
        planes: *const *mut libc::c_void,
    ),
>;
pub type libvlc_video_display_cb = ::core::option::Option<
    unsafe extern "C" fn(opaque: *mut libc::c_void, picture: *mut libc::c_void),
>;
pub type libvlc_video_format_cb = ::core::option::Option<
    unsafe extern "C" fn(
        opaque: *mut *mut libc::c_void,
        chroma: *mut libc::c_char,
        width: *mut libc::c_uint,
        height: *mut libc::c_uint,
        pitches: *mut libc::c_uint,
        lines: *mut libc::c_uint,
    ) -> libc::c_uint,
>;
pub type libvlc_video_cleanup_cb =
    ::core::option::Option<unsafe extern "C" fn(opaque: *mut libc::c_void)>;
extern "C" {
    pub fn libvlc_video_set_callbacks(
        mp: *mut libvlc_media_player_t,
        lock: libvlc_video_lock_cb,
        unlock: libvlc_video_unlock_cb,
        display: libvlc_video_display_cb,
        opaque: *mut libc::c_void,
    );
}
extern "C" {
    pub fn libvlc_video_set_format(
        mp: *mut libvlc_media_player_t,
        chroma: *const libc::c_char,
        width: libc::c_uint,
        height: libc::c_uint,
        pitch: libc::c_uint,
    );
}
extern "C" {
    pub fn libvlc_video_set_format_callbacks(
        mp: *mut libvlc_media_player_t,
        setup: libvlc_video_format_cb,
        cleanup: libvlc_video_cleanup_cb,
    );
}
extern "C" {
    pub fn libvlc_media_player_set_nsobject(
        p_mi: *mut libvlc_media_player_t,
        drawable: *mut libc::c_void,
    );
}
extern "C" {
    pub fn libvlc_media_player_get_nsobject(p_mi: *mut libvlc_media_player_t) -> *mut libc::c_void;
}
extern "C" {
    pub fn libvlc_media_player_set_xwindow(p_mi: *mut libvlc_media_player_t, drawable: u32);
}
extern "C" {
    pub fn libvlc_media_player_get_xwindow(p_mi: *mut libvlc_media_player_t) -> u32;
}
extern "C" {
    pub fn libvlc_media_player_set_hwnd(
        p_mi: *mut libvlc_media_player_t,
        drawable: *mut libc::c_void,
    );
}
extern "C" {
    pub fn libvlc_media_player_get_hwnd(p_mi: *mut libvlc_media_player_t) -> *mut libc::c_void;
}
extern "C" {
    pub fn libvlc_media_player_set_android_context(
        p_mi: *mut libvlc_media_player_t,
        p_awindow_handler: *mut libc::c_void,
    );
}
extern "C" {
    pub fn libvlc_media_player_set_evas_object(
        p_mi: *mut libvlc_media_player_t,
        p_evas_object: *mut libc::c_void,
    ) -> libc::c_int;
}
pub type libvlc_audio_play_cb = ::core::option::Option<
    unsafe extern "C" fn(
        data: *mut libc::c_void,
        samples: *const libc::c_void,
        count: libc::c_uint,
        pts: i64,
    ),
>;
pub type libvlc_audio_pause_cb =
    ::core::option::Option<unsafe extern "C" fn(data: *mut libc::c_void, pts: i64)>;
pub type libvlc_audio_resume_cb =
    ::core::option::Option<unsafe extern "C" fn(data: *mut libc::c_void, pts: i64)>;
pub type libvlc_audio_flush_cb =
    ::core::option::Option<unsafe extern "C" fn(data: *mut libc::c_void, pts: i64)>;
pub type libvlc_audio_drain_cb =
    ::core::option::Option<unsafe extern "C" fn(data: *mut libc::c_void)>;
pub type libvlc_audio_set_volume_cb =
    ::core::option::Option<unsafe extern "C" fn(data: *mut libc::c_void, volume: f32, mute: bool)>;
extern "C" {
    pub fn libvlc_audio_set_callbacks(
        mp: *mut libvlc_media_player_t,
        play: libvlc_audio_play_cb,
        pause: libvlc_audio_pause_cb,
        resume: libvlc_audio_resume_cb,
        flush: libvlc_audio_flush_cb,
        drain: libvlc_audio_drain_cb,
        opaque: *mut libc::c_void,
    );
}
extern "C" {
    pub fn libvlc_audio_set_volume_callback(
        mp: *mut libvlc_media_player_t,
        set_volume: libvlc_audio_set_volume_cb,
    );
}
pub type libvlc_audio_setup_cb = ::core::option::Option<
    unsafe extern "C" fn(
        data: *mut *mut libc::c_void,
        format: *mut libc::c_char,
        rate: *mut libc::c_uint,
        channels: *mut libc::c_uint,
    ) -> libc::c_int,
>;
pub type libvlc_audio_cleanup_cb =
    ::core::option::Option<unsafe extern "C" fn(data: *mut libc::c_void)>;
extern "C" {
    pub fn libvlc_audio_set_format_callbacks(
        mp: *mut libvlc_media_player_t,
        setup: libvlc_audio_setup_cb,
        cleanup: libvlc_audio_cleanup_cb,
    );
}
extern "C" {
    pub fn libvlc_audio_set_format(
        mp: *mut libvlc_media_player_t,
        format: *const libc::c_char,
        rate: libc::c_uint,
        channels: libc::c_uint,
    );
}
extern "C" {
    pub fn libvlc_media_player_get_length(p_mi: *mut libvlc_media_player_t) -> libvlc_time_t;
}
extern "C" {
    pub fn libvlc_media_player_get_time(p_mi: *mut libvlc_media_player_t) -> libvlc_time_t;
}
extern "C" {
    pub fn libvlc_media_player_set_time(p_mi: *mut libvlc_media_player_t, i_time: libvlc_time_t);
}
extern "C" {
    pub fn libvlc_media_player_get_position(p_mi: *mut libvlc_media_player_t) -> f32;
}
extern "C" {
    pub fn libvlc_media_player_set_position(p_mi: *mut libvlc_media_player_t, f_pos: f32);
}
extern "C" {
    pub fn libvlc_media_player_set_chapter(
        p_mi: *mut libvlc_media_player_t,
        i_chapter: libc::c_int,
    );
}
extern "C" {
    pub fn libvlc_media_player_get_chapter(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_player_get_chapter_count(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_player_will_play(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_player_get_chapter_count_for_title(
        p_mi: *mut libvlc_media_player_t,
        i_title: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_player_set_title(p_mi: *mut libvlc_media_player_t, i_title: libc::c_int);
}
extern "C" {
    pub fn libvlc_media_player_get_title(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_player_get_title_count(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_player_previous_chapter(p_mi: *mut libvlc_media_player_t);
}
extern "C" {
    pub fn libvlc_media_player_next_chapter(p_mi: *mut libvlc_media_player_t);
}
extern "C" {
    pub fn libvlc_media_player_get_rate(p_mi: *mut libvlc_media_player_t) -> f32;
}
extern "C" {
    pub fn libvlc_media_player_set_rate(p_mi: *mut libvlc_media_player_t, rate: f32)
        -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_player_get_state(p_mi: *mut libvlc_media_player_t) -> libvlc_state_t;
}
extern "C" {
    pub fn libvlc_media_player_has_vout(p_mi: *mut libvlc_media_player_t) -> libc::c_uint;
}
extern "C" {
    pub fn libvlc_media_player_is_seekable(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_player_can_pause(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_player_program_scrambled(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_player_next_frame(p_mi: *mut libvlc_media_player_t);
}
extern "C" {
    pub fn libvlc_media_player_navigate(p_mi: *mut libvlc_media_player_t, navigate: libc::c_uint);
}
extern "C" {
    pub fn libvlc_media_player_set_video_title_display(
        p_mi: *mut libvlc_media_player_t,
        position: libvlc_position_t,
        timeout: libc::c_uint,
    );
}
extern "C" {
    pub fn libvlc_media_player_add_slave(
        p_mi: *mut libvlc_media_player_t,
        i_type: libvlc_media_slave_type_t,
        psz_uri: *const libc::c_char,
        b_select: bool,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_track_description_list_release(
        p_track_description: *mut libvlc_track_description_t,
    );
}
extern "C" {
    pub fn libvlc_toggle_fullscreen(p_mi: *mut libvlc_media_player_t);
}
extern "C" {
    pub fn libvlc_set_fullscreen(p_mi: *mut libvlc_media_player_t, b_fullscreen: libc::c_int);
}
extern "C" {
    pub fn libvlc_get_fullscreen(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_video_set_key_input(p_mi: *mut libvlc_media_player_t, on: libc::c_uint);
}
extern "C" {
    pub fn libvlc_video_set_mouse_input(p_mi: *mut libvlc_media_player_t, on: libc::c_uint);
}
extern "C" {
    pub fn libvlc_video_get_size(
        p_mi: *mut libvlc_media_player_t,
        num: libc::c_uint,
        px: *mut libc::c_uint,
        py: *mut libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_video_get_cursor(
        p_mi: *mut libvlc_media_player_t,
        num: libc::c_uint,
        px: *mut libc::c_int,
        py: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_video_get_scale(p_mi: *mut libvlc_media_player_t) -> f32;
}
extern "C" {
    pub fn libvlc_video_set_scale(p_mi: *mut libvlc_media_player_t, f_factor: f32);
}
extern "C" {
    pub fn libvlc_video_get_aspect_ratio(p_mi: *mut libvlc_media_player_t) -> *mut libc::c_char;
}
extern "C" {
    pub fn libvlc_video_set_aspect_ratio(
        p_mi: *mut libvlc_media_player_t,
        psz_aspect: *const libc::c_char,
    );
}
extern "C" {
    pub fn libvlc_video_new_viewpoint() -> *mut libvlc_video_viewpoint_t;
}
extern "C" {
    pub fn libvlc_video_update_viewpoint(
        p_mi: *mut libvlc_media_player_t,
        p_viewpoint: *const libvlc_video_viewpoint_t,
        b_absolute: bool,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_video_get_spu(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_video_get_spu_count(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_video_get_spu_description(
        p_mi: *mut libvlc_media_player_t,
    ) -> *mut libvlc_track_description_t;
}
extern "C" {
    pub fn libvlc_video_set_spu(
        p_mi: *mut libvlc_media_player_t,
        i_spu: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_video_get_spu_delay(p_mi: *mut libvlc_media_player_t) -> i64;
}
extern "C" {
    pub fn libvlc_video_set_spu_delay(
        p_mi: *mut libvlc_media_player_t,
        i_delay: i64,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_player_get_full_title_descriptions(
        p_mi: *mut libvlc_media_player_t,
        titles: *mut *mut *mut libvlc_title_description_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_title_descriptions_release(
        p_titles: *mut *mut libvlc_title_description_t,
        i_count: libc::c_uint,
    );
}
extern "C" {
    pub fn libvlc_media_player_get_full_chapter_descriptions(
        p_mi: *mut libvlc_media_player_t,
        i_chapters_of_title: libc::c_int,
        pp_chapters: *mut *mut *mut libvlc_chapter_description_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_chapter_descriptions_release(
        p_chapters: *mut *mut libvlc_chapter_description_t,
        i_count: libc::c_uint,
    );
}
extern "C" {
    pub fn libvlc_video_get_crop_geometry(p_mi: *mut libvlc_media_player_t) -> *mut libc::c_char;
}
extern "C" {
    pub fn libvlc_video_set_crop_geometry(
        p_mi: *mut libvlc_media_player_t,
        psz_geometry: *const libc::c_char,
    );
}
extern "C" {
    pub fn libvlc_video_get_teletext(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_video_set_teletext(p_mi: *mut libvlc_media_player_t, i_page: libc::c_int);
}
extern "C" {
    pub fn libvlc_video_get_track_count(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_video_get_track_description(
        p_mi: *mut libvlc_media_player_t,
    ) -> *mut libvlc_track_description_t;
}
extern "C" {
    pub fn libvlc_video_get_track(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_video_set_track(
        p_mi: *mut libvlc_media_player_t,
        i_track: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_video_take_snapshot(
        p_mi: *mut libvlc_media_player_t,
        num: libc::c_uint,
        psz_filepath: *const libc::c_char,
        i_width: libc::c_uint,
        i_height: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_video_set_deinterlace(
        p_mi: *mut libvlc_media_player_t,
        psz_mode: *const libc::c_char,
    );
}
extern "C" {
    pub fn libvlc_video_get_marquee_int(
        p_mi: *mut libvlc_media_player_t,
        option: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_video_get_marquee_string(
        p_mi: *mut libvlc_media_player_t,
        option: libc::c_uint,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn libvlc_video_set_marquee_int(
        p_mi: *mut libvlc_media_player_t,
        option: libc::c_uint,
        i_val: libc::c_int,
    );
}
extern "C" {
    pub fn libvlc_video_set_marquee_string(
        p_mi: *mut libvlc_media_player_t,
        option: libc::c_uint,
        psz_text: *const libc::c_char,
    );
}
pub const libvlc_video_logo_option_t_libvlc_logo_enable: libvlc_video_logo_option_t = 0;
pub const libvlc_video_logo_option_t_libvlc_logo_file: libvlc_video_logo_option_t = 1;
pub const libvlc_video_logo_option_t_libvlc_logo_x: libvlc_video_logo_option_t = 2;
pub const libvlc_video_logo_option_t_libvlc_logo_y: libvlc_video_logo_option_t = 3;
pub const libvlc_video_logo_option_t_libvlc_logo_delay: libvlc_video_logo_option_t = 4;
pub const libvlc_video_logo_option_t_libvlc_logo_repeat: libvlc_video_logo_option_t = 5;
pub const libvlc_video_logo_option_t_libvlc_logo_opacity: libvlc_video_logo_option_t = 6;
pub const libvlc_video_logo_option_t_libvlc_logo_position: libvlc_video_logo_option_t = 7;
pub type libvlc_video_logo_option_t = libc::c_uint;
extern "C" {
    pub fn libvlc_video_get_logo_int(
        p_mi: *mut libvlc_media_player_t,
        option: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_video_set_logo_int(
        p_mi: *mut libvlc_media_player_t,
        option: libc::c_uint,
        value: libc::c_int,
    );
}
extern "C" {
    pub fn libvlc_video_set_logo_string(
        p_mi: *mut libvlc_media_player_t,
        option: libc::c_uint,
        psz_value: *const libc::c_char,
    );
}
pub const libvlc_video_adjust_option_t_libvlc_adjust_Enable: libvlc_video_adjust_option_t = 0;
pub const libvlc_video_adjust_option_t_libvlc_adjust_Contrast: libvlc_video_adjust_option_t = 1;
pub const libvlc_video_adjust_option_t_libvlc_adjust_Brightness: libvlc_video_adjust_option_t = 2;
pub const libvlc_video_adjust_option_t_libvlc_adjust_Hue: libvlc_video_adjust_option_t = 3;
pub const libvlc_video_adjust_option_t_libvlc_adjust_Saturation: libvlc_video_adjust_option_t = 4;
pub const libvlc_video_adjust_option_t_libvlc_adjust_Gamma: libvlc_video_adjust_option_t = 5;
pub type libvlc_video_adjust_option_t = libc::c_uint;
extern "C" {
    pub fn libvlc_video_get_adjust_int(
        p_mi: *mut libvlc_media_player_t,
        option: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_video_set_adjust_int(
        p_mi: *mut libvlc_media_player_t,
        option: libc::c_uint,
        value: libc::c_int,
    );
}
extern "C" {
    pub fn libvlc_video_get_adjust_float(
        p_mi: *mut libvlc_media_player_t,
        option: libc::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn libvlc_video_set_adjust_float(
        p_mi: *mut libvlc_media_player_t,
        option: libc::c_uint,
        value: f32,
    );
}
pub const libvlc_audio_output_device_types_t_libvlc_AudioOutputDevice_Error:
    libvlc_audio_output_device_types_t = -1;
pub const libvlc_audio_output_device_types_t_libvlc_AudioOutputDevice_Mono:
    libvlc_audio_output_device_types_t = 1;
pub const libvlc_audio_output_device_types_t_libvlc_AudioOutputDevice_Stereo:
    libvlc_audio_output_device_types_t = 2;
pub const libvlc_audio_output_device_types_t_libvlc_AudioOutputDevice_2F2R:
    libvlc_audio_output_device_types_t = 4;
pub const libvlc_audio_output_device_types_t_libvlc_AudioOutputDevice_3F2R:
    libvlc_audio_output_device_types_t = 5;
pub const libvlc_audio_output_device_types_t_libvlc_AudioOutputDevice_5_1:
    libvlc_audio_output_device_types_t = 6;
pub const libvlc_audio_output_device_types_t_libvlc_AudioOutputDevice_6_1:
    libvlc_audio_output_device_types_t = 7;
pub const libvlc_audio_output_device_types_t_libvlc_AudioOutputDevice_7_1:
    libvlc_audio_output_device_types_t = 8;
pub const libvlc_audio_output_device_types_t_libvlc_AudioOutputDevice_SPDIF:
    libvlc_audio_output_device_types_t = 10;
pub type libvlc_audio_output_device_types_t = libc::c_int;
pub const libvlc_audio_output_channel_t_libvlc_AudioChannel_Error: libvlc_audio_output_channel_t =
    -1;
pub const libvlc_audio_output_channel_t_libvlc_AudioChannel_Stereo: libvlc_audio_output_channel_t =
    1;
pub const libvlc_audio_output_channel_t_libvlc_AudioChannel_RStereo: libvlc_audio_output_channel_t =
    2;
pub const libvlc_audio_output_channel_t_libvlc_AudioChannel_Left: libvlc_audio_output_channel_t = 3;
pub const libvlc_audio_output_channel_t_libvlc_AudioChannel_Right: libvlc_audio_output_channel_t =
    4;
pub const libvlc_audio_output_channel_t_libvlc_AudioChannel_Dolbys: libvlc_audio_output_channel_t =
    5;
pub type libvlc_audio_output_channel_t = libc::c_int;
extern "C" {
    pub fn libvlc_audio_output_list_get(
        p_instance: *mut libvlc_instance_t,
    ) -> *mut libvlc_audio_output_t;
}
extern "C" {
    pub fn libvlc_audio_output_list_release(p_list: *mut libvlc_audio_output_t);
}
extern "C" {
    pub fn libvlc_audio_output_set(
        p_mi: *mut libvlc_media_player_t,
        psz_name: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_audio_output_device_enum(
        mp: *mut libvlc_media_player_t,
    ) -> *mut libvlc_audio_output_device_t;
}
extern "C" {
    pub fn libvlc_audio_output_device_list_get(
        p_instance: *mut libvlc_instance_t,
        aout: *const libc::c_char,
    ) -> *mut libvlc_audio_output_device_t;
}
extern "C" {
    pub fn libvlc_audio_output_device_list_release(p_list: *mut libvlc_audio_output_device_t);
}
extern "C" {
    pub fn libvlc_audio_output_device_set(
        mp: *mut libvlc_media_player_t,
        module: *const libc::c_char,
        device_id: *const libc::c_char,
    );
}
extern "C" {
    pub fn libvlc_audio_output_device_get(mp: *mut libvlc_media_player_t) -> *mut libc::c_char;
}
extern "C" {
    pub fn libvlc_audio_toggle_mute(p_mi: *mut libvlc_media_player_t);
}
extern "C" {
    pub fn libvlc_audio_get_mute(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_audio_set_mute(p_mi: *mut libvlc_media_player_t, status: libc::c_int);
}
extern "C" {
    pub fn libvlc_audio_get_volume(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_audio_set_volume(
        p_mi: *mut libvlc_media_player_t,
        i_volume: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_audio_get_track_count(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_audio_get_track_description(
        p_mi: *mut libvlc_media_player_t,
    ) -> *mut libvlc_track_description_t;
}
extern "C" {
    pub fn libvlc_audio_get_track(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_audio_set_track(
        p_mi: *mut libvlc_media_player_t,
        i_track: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_audio_get_channel(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_audio_set_channel(
        p_mi: *mut libvlc_media_player_t,
        channel: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_audio_get_delay(p_mi: *mut libvlc_media_player_t) -> i64;
}
extern "C" {
    pub fn libvlc_audio_set_delay(p_mi: *mut libvlc_media_player_t, i_delay: i64) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_audio_equalizer_get_preset_count() -> libc::c_uint;
}
extern "C" {
    pub fn libvlc_audio_equalizer_get_preset_name(u_index: libc::c_uint) -> *const libc::c_char;
}
extern "C" {
    pub fn libvlc_audio_equalizer_get_band_count() -> libc::c_uint;
}
extern "C" {
    pub fn libvlc_audio_equalizer_get_band_frequency(u_index: libc::c_uint) -> f32;
}
extern "C" {
    pub fn libvlc_audio_equalizer_new() -> *mut libvlc_equalizer_t;
}
extern "C" {
    pub fn libvlc_audio_equalizer_new_from_preset(u_index: libc::c_uint)
        -> *mut libvlc_equalizer_t;
}
extern "C" {
    pub fn libvlc_audio_equalizer_release(p_equalizer: *mut libvlc_equalizer_t);
}
extern "C" {
    pub fn libvlc_audio_equalizer_set_preamp(
        p_equalizer: *mut libvlc_equalizer_t,
        f_preamp: f32,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_audio_equalizer_get_preamp(p_equalizer: *mut libvlc_equalizer_t) -> f32;
}
extern "C" {
    pub fn libvlc_audio_equalizer_set_amp_at_index(
        p_equalizer: *mut libvlc_equalizer_t,
        f_amp: f32,
        u_band: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_audio_equalizer_get_amp_at_index(
        p_equalizer: *mut libvlc_equalizer_t,
        u_band: libc::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn libvlc_media_player_set_equalizer(
        p_mi: *mut libvlc_media_player_t,
        p_equalizer: *mut libvlc_equalizer_t,
    ) -> libc::c_int;
}
pub const libvlc_media_player_role_libvlc_role_None: libvlc_media_player_role = 0;
pub const libvlc_media_player_role_libvlc_role_Music: libvlc_media_player_role = 1;
pub const libvlc_media_player_role_libvlc_role_Video: libvlc_media_player_role = 2;
pub const libvlc_media_player_role_libvlc_role_Communication: libvlc_media_player_role = 3;
pub const libvlc_media_player_role_libvlc_role_Game: libvlc_media_player_role = 4;
pub const libvlc_media_player_role_libvlc_role_Notification: libvlc_media_player_role = 5;
pub const libvlc_media_player_role_libvlc_role_Animation: libvlc_media_player_role = 6;
pub const libvlc_media_player_role_libvlc_role_Production: libvlc_media_player_role = 7;
pub const libvlc_media_player_role_libvlc_role_Accessibility: libvlc_media_player_role = 8;
pub const libvlc_media_player_role_libvlc_role_Test: libvlc_media_player_role = 9;
pub type libvlc_media_player_role = libc::c_uint;
pub use self::libvlc_media_player_role as libvlc_media_player_role_t;
extern "C" {
    pub fn libvlc_media_player_get_role(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_player_set_role(
        p_mi: *mut libvlc_media_player_t,
        role: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_list_new(p_instance: *mut libvlc_instance_t) -> *mut libvlc_media_list_t;
}
extern "C" {
    pub fn libvlc_media_list_release(p_ml: *mut libvlc_media_list_t);
}
extern "C" {
    pub fn libvlc_media_list_retain(p_ml: *mut libvlc_media_list_t);
}
extern "C" {
    pub fn libvlc_media_list_set_media(p_ml: *mut libvlc_media_list_t, p_md: *mut libvlc_media_t);
}
extern "C" {
    pub fn libvlc_media_list_media(p_ml: *mut libvlc_media_list_t) -> *mut libvlc_media_t;
}
extern "C" {
    pub fn libvlc_media_list_add_media(
        p_ml: *mut libvlc_media_list_t,
        p_md: *mut libvlc_media_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_list_insert_media(
        p_ml: *mut libvlc_media_list_t,
        p_md: *mut libvlc_media_t,
        i_pos: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_list_remove_index(
        p_ml: *mut libvlc_media_list_t,
        i_pos: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_list_count(p_ml: *mut libvlc_media_list_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_list_item_at_index(
        p_ml: *mut libvlc_media_list_t,
        i_pos: libc::c_int,
    ) -> *mut libvlc_media_t;
}
extern "C" {
    pub fn libvlc_media_list_index_of_item(
        p_ml: *mut libvlc_media_list_t,
        p_md: *mut libvlc_media_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_list_is_readonly(p_ml: *mut libvlc_media_list_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_list_lock(p_ml: *mut libvlc_media_list_t);
}
extern "C" {
    pub fn libvlc_media_list_unlock(p_ml: *mut libvlc_media_list_t);
}
extern "C" {
    pub fn libvlc_media_list_event_manager(
        p_ml: *mut libvlc_media_list_t,
    ) -> *mut libvlc_event_manager_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_media_list_player_t {
    _unused: [u8; 0],
}
pub const libvlc_playback_mode_t_libvlc_playback_mode_default: libvlc_playback_mode_t = 0;
pub const libvlc_playback_mode_t_libvlc_playback_mode_loop: libvlc_playback_mode_t = 1;
pub const libvlc_playback_mode_t_libvlc_playback_mode_repeat: libvlc_playback_mode_t = 2;
pub type libvlc_playback_mode_t = libc::c_uint;
extern "C" {
    pub fn libvlc_media_list_player_new(
        p_instance: *mut libvlc_instance_t,
    ) -> *mut libvlc_media_list_player_t;
}
extern "C" {
    pub fn libvlc_media_list_player_release(p_mlp: *mut libvlc_media_list_player_t);
}
extern "C" {
    pub fn libvlc_media_list_player_retain(p_mlp: *mut libvlc_media_list_player_t);
}
extern "C" {
    pub fn libvlc_media_list_player_event_manager(
        p_mlp: *mut libvlc_media_list_player_t,
    ) -> *mut libvlc_event_manager_t;
}
extern "C" {
    pub fn libvlc_media_list_player_set_media_player(
        p_mlp: *mut libvlc_media_list_player_t,
        p_mi: *mut libvlc_media_player_t,
    );
}
extern "C" {
    pub fn libvlc_media_list_player_get_media_player(
        p_mlp: *mut libvlc_media_list_player_t,
    ) -> *mut libvlc_media_player_t;
}
extern "C" {
    pub fn libvlc_media_list_player_set_media_list(
        p_mlp: *mut libvlc_media_list_player_t,
        p_mlist: *mut libvlc_media_list_t,
    );
}
extern "C" {
    pub fn libvlc_media_list_player_play(p_mlp: *mut libvlc_media_list_player_t);
}
extern "C" {
    pub fn libvlc_media_list_player_pause(p_mlp: *mut libvlc_media_list_player_t);
}
extern "C" {
    pub fn libvlc_media_list_player_set_pause(
        p_mlp: *mut libvlc_media_list_player_t,
        do_pause: libc::c_int,
    );
}
extern "C" {
    pub fn libvlc_media_list_player_is_playing(
        p_mlp: *mut libvlc_media_list_player_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_list_player_get_state(
        p_mlp: *mut libvlc_media_list_player_t,
    ) -> libvlc_state_t;
}
extern "C" {
    pub fn libvlc_media_list_player_play_item_at_index(
        p_mlp: *mut libvlc_media_list_player_t,
        i_index: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_list_player_play_item(
        p_mlp: *mut libvlc_media_list_player_t,
        p_md: *mut libvlc_media_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_list_player_stop(p_mlp: *mut libvlc_media_list_player_t);
}
extern "C" {
    pub fn libvlc_media_list_player_next(p_mlp: *mut libvlc_media_list_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_list_player_previous(p_mlp: *mut libvlc_media_list_player_t)
        -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_list_player_set_playback_mode(
        p_mlp: *mut libvlc_media_list_player_t,
        e_mode: libvlc_playback_mode_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_media_library_t {
    _unused: [u8; 0],
}
extern "C" {
    pub fn libvlc_media_library_new(
        p_instance: *mut libvlc_instance_t,
    ) -> *mut libvlc_media_library_t;
}
extern "C" {
    pub fn libvlc_media_library_release(p_mlib: *mut libvlc_media_library_t);
}
extern "C" {
    pub fn libvlc_media_library_retain(p_mlib: *mut libvlc_media_library_t);
}
extern "C" {
    pub fn libvlc_media_library_load(p_mlib: *mut libvlc_media_library_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_library_media_list(
        p_mlib: *mut libvlc_media_library_t,
    ) -> *mut libvlc_media_list_t;
}
pub const libvlc_media_discoverer_category_t_libvlc_media_discoverer_devices:
    libvlc_media_discoverer_category_t = 0;
pub const libvlc_media_discoverer_category_t_libvlc_media_discoverer_lan:
    libvlc_media_discoverer_category_t = 1;
pub const libvlc_media_discoverer_category_t_libvlc_media_discoverer_podcasts:
    libvlc_media_discoverer_category_t = 2;
pub const libvlc_media_discoverer_category_t_libvlc_media_discoverer_localdirs:
    libvlc_media_discoverer_category_t = 3;
pub type libvlc_media_discoverer_category_t = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_media_discoverer_description_t {
    pub psz_name: *mut libc::c_char,
    pub psz_longname: *mut libc::c_char,
    pub i_cat: libvlc_media_discoverer_category_t,
}
#[test]
fn bindgen_test_layout_libvlc_media_discoverer_description_t() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_media_discoverer_description_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_media_discoverer_description_t)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_media_discoverer_description_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_media_discoverer_description_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_discoverer_description_t>())).psz_name as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_discoverer_description_t),
            "::",
            stringify!(psz_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_discoverer_description_t>())).psz_longname
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_discoverer_description_t),
            "::",
            stringify!(psz_longname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_media_discoverer_description_t>())).i_cat as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_media_discoverer_description_t),
            "::",
            stringify!(i_cat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_media_discoverer_t {
    _unused: [u8; 0],
}
extern "C" {
    pub fn libvlc_media_discoverer_new(
        p_inst: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
    ) -> *mut libvlc_media_discoverer_t;
}
extern "C" {
    pub fn libvlc_media_discoverer_start(p_mdis: *mut libvlc_media_discoverer_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_discoverer_stop(p_mdis: *mut libvlc_media_discoverer_t);
}
extern "C" {
    pub fn libvlc_media_discoverer_release(p_mdis: *mut libvlc_media_discoverer_t);
}
extern "C" {
    pub fn libvlc_media_discoverer_media_list(
        p_mdis: *mut libvlc_media_discoverer_t,
    ) -> *mut libvlc_media_list_t;
}
extern "C" {
    pub fn libvlc_media_discoverer_is_running(
        p_mdis: *mut libvlc_media_discoverer_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_discoverer_list_get(
        p_inst: *mut libvlc_instance_t,
        i_cat: libvlc_media_discoverer_category_t,
        ppp_services: *mut *mut *mut libvlc_media_discoverer_description_t,
    ) -> size_t;
}
extern "C" {
    pub fn libvlc_media_discoverer_list_release(
        pp_services: *mut *mut libvlc_media_discoverer_description_t,
        i_count: size_t,
    );
}
pub const libvlc_event_e_libvlc_MediaMetaChanged: libvlc_event_e = 0;
pub const libvlc_event_e_libvlc_MediaSubItemAdded: libvlc_event_e = 1;
pub const libvlc_event_e_libvlc_MediaDurationChanged: libvlc_event_e = 2;
pub const libvlc_event_e_libvlc_MediaParsedChanged: libvlc_event_e = 3;
pub const libvlc_event_e_libvlc_MediaFreed: libvlc_event_e = 4;
pub const libvlc_event_e_libvlc_MediaStateChanged: libvlc_event_e = 5;
pub const libvlc_event_e_libvlc_MediaSubItemTreeAdded: libvlc_event_e = 6;
pub const libvlc_event_e_libvlc_MediaPlayerMediaChanged: libvlc_event_e = 256;
pub const libvlc_event_e_libvlc_MediaPlayerNothingSpecial: libvlc_event_e = 257;
pub const libvlc_event_e_libvlc_MediaPlayerOpening: libvlc_event_e = 258;
pub const libvlc_event_e_libvlc_MediaPlayerBuffering: libvlc_event_e = 259;
pub const libvlc_event_e_libvlc_MediaPlayerPlaying: libvlc_event_e = 260;
pub const libvlc_event_e_libvlc_MediaPlayerPaused: libvlc_event_e = 261;
pub const libvlc_event_e_libvlc_MediaPlayerStopped: libvlc_event_e = 262;
pub const libvlc_event_e_libvlc_MediaPlayerForward: libvlc_event_e = 263;
pub const libvlc_event_e_libvlc_MediaPlayerBackward: libvlc_event_e = 264;
pub const libvlc_event_e_libvlc_MediaPlayerEndReached: libvlc_event_e = 265;
pub const libvlc_event_e_libvlc_MediaPlayerEncounteredError: libvlc_event_e = 266;
pub const libvlc_event_e_libvlc_MediaPlayerTimeChanged: libvlc_event_e = 267;
pub const libvlc_event_e_libvlc_MediaPlayerPositionChanged: libvlc_event_e = 268;
pub const libvlc_event_e_libvlc_MediaPlayerSeekableChanged: libvlc_event_e = 269;
pub const libvlc_event_e_libvlc_MediaPlayerPausableChanged: libvlc_event_e = 270;
pub const libvlc_event_e_libvlc_MediaPlayerTitleChanged: libvlc_event_e = 271;
pub const libvlc_event_e_libvlc_MediaPlayerSnapshotTaken: libvlc_event_e = 272;
pub const libvlc_event_e_libvlc_MediaPlayerLengthChanged: libvlc_event_e = 273;
pub const libvlc_event_e_libvlc_MediaPlayerVout: libvlc_event_e = 274;
pub const libvlc_event_e_libvlc_MediaPlayerScrambledChanged: libvlc_event_e = 275;
pub const libvlc_event_e_libvlc_MediaPlayerESAdded: libvlc_event_e = 276;
pub const libvlc_event_e_libvlc_MediaPlayerESDeleted: libvlc_event_e = 277;
pub const libvlc_event_e_libvlc_MediaPlayerESSelected: libvlc_event_e = 278;
pub const libvlc_event_e_libvlc_MediaPlayerCorked: libvlc_event_e = 279;
pub const libvlc_event_e_libvlc_MediaPlayerUncorked: libvlc_event_e = 280;
pub const libvlc_event_e_libvlc_MediaPlayerMuted: libvlc_event_e = 281;
pub const libvlc_event_e_libvlc_MediaPlayerUnmuted: libvlc_event_e = 282;
pub const libvlc_event_e_libvlc_MediaPlayerAudioVolume: libvlc_event_e = 283;
pub const libvlc_event_e_libvlc_MediaPlayerAudioDevice: libvlc_event_e = 284;
pub const libvlc_event_e_libvlc_MediaPlayerChapterChanged: libvlc_event_e = 285;
pub const libvlc_event_e_libvlc_MediaListItemAdded: libvlc_event_e = 512;
pub const libvlc_event_e_libvlc_MediaListWillAddItem: libvlc_event_e = 513;
pub const libvlc_event_e_libvlc_MediaListItemDeleted: libvlc_event_e = 514;
pub const libvlc_event_e_libvlc_MediaListWillDeleteItem: libvlc_event_e = 515;
pub const libvlc_event_e_libvlc_MediaListEndReached: libvlc_event_e = 516;
pub const libvlc_event_e_libvlc_MediaListViewItemAdded: libvlc_event_e = 768;
pub const libvlc_event_e_libvlc_MediaListViewWillAddItem: libvlc_event_e = 769;
pub const libvlc_event_e_libvlc_MediaListViewItemDeleted: libvlc_event_e = 770;
pub const libvlc_event_e_libvlc_MediaListViewWillDeleteItem: libvlc_event_e = 771;
pub const libvlc_event_e_libvlc_MediaListPlayerPlayed: libvlc_event_e = 1024;
pub const libvlc_event_e_libvlc_MediaListPlayerNextItemSet: libvlc_event_e = 1025;
pub const libvlc_event_e_libvlc_MediaListPlayerStopped: libvlc_event_e = 1026;
pub const libvlc_event_e_libvlc_MediaDiscovererStarted: libvlc_event_e = 1280;
pub const libvlc_event_e_libvlc_MediaDiscovererEnded: libvlc_event_e = 1281;
pub const libvlc_event_e_libvlc_RendererDiscovererItemAdded: libvlc_event_e = 1282;
pub const libvlc_event_e_libvlc_RendererDiscovererItemDeleted: libvlc_event_e = 1283;
pub const libvlc_event_e_libvlc_VlmMediaAdded: libvlc_event_e = 1536;
pub const libvlc_event_e_libvlc_VlmMediaRemoved: libvlc_event_e = 1537;
pub const libvlc_event_e_libvlc_VlmMediaChanged: libvlc_event_e = 1538;
pub const libvlc_event_e_libvlc_VlmMediaInstanceStarted: libvlc_event_e = 1539;
pub const libvlc_event_e_libvlc_VlmMediaInstanceStopped: libvlc_event_e = 1540;
pub const libvlc_event_e_libvlc_VlmMediaInstanceStatusInit: libvlc_event_e = 1541;
pub const libvlc_event_e_libvlc_VlmMediaInstanceStatusOpening: libvlc_event_e = 1542;
pub const libvlc_event_e_libvlc_VlmMediaInstanceStatusPlaying: libvlc_event_e = 1543;
pub const libvlc_event_e_libvlc_VlmMediaInstanceStatusPause: libvlc_event_e = 1544;
pub const libvlc_event_e_libvlc_VlmMediaInstanceStatusEnd: libvlc_event_e = 1545;
pub const libvlc_event_e_libvlc_VlmMediaInstanceStatusError: libvlc_event_e = 1546;
pub type libvlc_event_e = libc::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct libvlc_event_t {
    pub type_: libc::c_int,
    pub p_obj: *mut libc::c_void,
    pub u: libvlc_event_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union libvlc_event_t__bindgen_ty_1 {
    pub media_meta_changed: libvlc_event_t__bindgen_ty_1__bindgen_ty_1,
    pub media_subitem_added: libvlc_event_t__bindgen_ty_1__bindgen_ty_2,
    pub media_duration_changed: libvlc_event_t__bindgen_ty_1__bindgen_ty_3,
    pub media_parsed_changed: libvlc_event_t__bindgen_ty_1__bindgen_ty_4,
    pub media_freed: libvlc_event_t__bindgen_ty_1__bindgen_ty_5,
    pub media_state_changed: libvlc_event_t__bindgen_ty_1__bindgen_ty_6,
    pub media_subitemtree_added: libvlc_event_t__bindgen_ty_1__bindgen_ty_7,
    pub media_player_buffering: libvlc_event_t__bindgen_ty_1__bindgen_ty_8,
    pub media_player_chapter_changed: libvlc_event_t__bindgen_ty_1__bindgen_ty_9,
    pub media_player_position_changed: libvlc_event_t__bindgen_ty_1__bindgen_ty_10,
    pub media_player_time_changed: libvlc_event_t__bindgen_ty_1__bindgen_ty_11,
    pub media_player_title_changed: libvlc_event_t__bindgen_ty_1__bindgen_ty_12,
    pub media_player_seekable_changed: libvlc_event_t__bindgen_ty_1__bindgen_ty_13,
    pub media_player_pausable_changed: libvlc_event_t__bindgen_ty_1__bindgen_ty_14,
    pub media_player_scrambled_changed: libvlc_event_t__bindgen_ty_1__bindgen_ty_15,
    pub media_player_vout: libvlc_event_t__bindgen_ty_1__bindgen_ty_16,
    pub media_list_item_added: libvlc_event_t__bindgen_ty_1__bindgen_ty_17,
    pub media_list_will_add_item: libvlc_event_t__bindgen_ty_1__bindgen_ty_18,
    pub media_list_item_deleted: libvlc_event_t__bindgen_ty_1__bindgen_ty_19,
    pub media_list_will_delete_item: libvlc_event_t__bindgen_ty_1__bindgen_ty_20,
    pub media_list_player_next_item_set: libvlc_event_t__bindgen_ty_1__bindgen_ty_21,
    pub media_player_snapshot_taken: libvlc_event_t__bindgen_ty_1__bindgen_ty_22,
    pub media_player_length_changed: libvlc_event_t__bindgen_ty_1__bindgen_ty_23,
    pub vlm_media_event: libvlc_event_t__bindgen_ty_1__bindgen_ty_24,
    pub media_player_media_changed: libvlc_event_t__bindgen_ty_1__bindgen_ty_25,
    pub media_player_es_changed: libvlc_event_t__bindgen_ty_1__bindgen_ty_26,
    pub media_player_audio_volume: libvlc_event_t__bindgen_ty_1__bindgen_ty_27,
    pub media_player_audio_device: libvlc_event_t__bindgen_ty_1__bindgen_ty_28,
    pub renderer_discoverer_item_added: libvlc_event_t__bindgen_ty_1__bindgen_ty_29,
    pub renderer_discoverer_item_deleted: libvlc_event_t__bindgen_ty_1__bindgen_ty_30,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_1 {
    pub meta_type: libvlc_meta_t,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_1>())).meta_type
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(meta_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_2 {
    pub new_child: *mut libvlc_media_t,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_2>())).new_child
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(new_child)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_3 {
    pub new_duration: i64,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_3>())).new_duration
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(new_duration)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_4 {
    pub new_status: libc::c_int,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_4>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_4>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_4>())).new_status
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(new_status)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_5 {
    pub md: *mut libvlc_media_t,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_5>())).md as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(md)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_6 {
    pub new_state: libc::c_int,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_6>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_6>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_6>())).new_state
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(new_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_7 {
    pub item: *mut libvlc_media_t,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_7() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_7>())).item as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(item)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_8 {
    pub new_cache: f32,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_8() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_8>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_8)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_8>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_8>())).new_cache
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(new_cache)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_9 {
    pub new_chapter: libc::c_int,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_9() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_9>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_9)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_9>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_9>())).new_chapter
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(new_chapter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_10 {
    pub new_position: f32,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_10() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_10>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_10)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_10>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_10>())).new_position
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(new_position)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_11 {
    pub new_time: libvlc_time_t,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_11() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_11>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_11)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_11>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_11>())).new_time
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(new_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_12 {
    pub new_title: libc::c_int,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_12() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_12>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_12)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_12>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_12>())).new_title
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(new_title)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_13 {
    pub new_seekable: libc::c_int,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_13() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_13>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_13)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_13>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_13>())).new_seekable
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_13),
            "::",
            stringify!(new_seekable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_14 {
    pub new_pausable: libc::c_int,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_14() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_14>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_14)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_14>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_14>())).new_pausable
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_14),
            "::",
            stringify!(new_pausable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_15 {
    pub new_scrambled: libc::c_int,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_15() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_15>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_15)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_15>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_15>())).new_scrambled
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_15),
            "::",
            stringify!(new_scrambled)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_16 {
    pub new_count: libc::c_int,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_16() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_16>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_16)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_16>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_16>())).new_count
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_16),
            "::",
            stringify!(new_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_17 {
    pub item: *mut libvlc_media_t,
    pub index: libc::c_int,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_17() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_17>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_17)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_17>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_17)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_17>())).item
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_17),
            "::",
            stringify!(item)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_17>())).index
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_17),
            "::",
            stringify!(index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_18 {
    pub item: *mut libvlc_media_t,
    pub index: libc::c_int,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_18() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_18>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_18)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_18>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_18)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_18>())).item
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_18),
            "::",
            stringify!(item)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_18>())).index
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_18),
            "::",
            stringify!(index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_19 {
    pub item: *mut libvlc_media_t,
    pub index: libc::c_int,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_19() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_19>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_19)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_19>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_19)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_19>())).item
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_19),
            "::",
            stringify!(item)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_19>())).index
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_19),
            "::",
            stringify!(index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_20 {
    pub item: *mut libvlc_media_t,
    pub index: libc::c_int,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_20() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_20>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_20)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_20>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_20)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_20>())).item
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_20),
            "::",
            stringify!(item)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_20>())).index
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_20),
            "::",
            stringify!(index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_21 {
    pub item: *mut libvlc_media_t,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_21() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_21>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_21)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_21>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_21)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_21>())).item
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_21),
            "::",
            stringify!(item)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_22 {
    pub psz_filename: *mut libc::c_char,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_22() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_22>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_22)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_22>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_22)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_22>())).psz_filename
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_22),
            "::",
            stringify!(psz_filename)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_23 {
    pub new_length: libvlc_time_t,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_23() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_23>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_23)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_23>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_23)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_23>())).new_length
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_23),
            "::",
            stringify!(new_length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_24 {
    pub psz_media_name: *const libc::c_char,
    pub psz_instance_name: *const libc::c_char,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_24() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_24>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_24)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_24>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_24)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_24>())).psz_media_name
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_24),
            "::",
            stringify!(psz_media_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_24>()))
                .psz_instance_name as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_24),
            "::",
            stringify!(psz_instance_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_25 {
    pub new_media: *mut libvlc_media_t,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_25() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_25>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_25)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_25>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_25)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_25>())).new_media
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_25),
            "::",
            stringify!(new_media)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_26 {
    pub i_type: libvlc_track_type_t,
    pub i_id: libc::c_int,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_26() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_26>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_26)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_26>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_26)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_26>())).i_type
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_26),
            "::",
            stringify!(i_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_26>())).i_id
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_26),
            "::",
            stringify!(i_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_27 {
    pub volume: f32,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_27() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_27>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_27)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_27>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_27)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_27>())).volume
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_27),
            "::",
            stringify!(volume)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_28 {
    pub device: *const libc::c_char,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_28() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_28>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_28)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_28>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_28)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_28>())).device
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_28),
            "::",
            stringify!(device)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_29 {
    pub item: *mut libvlc_renderer_item_t,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_29() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_29>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_29)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_29>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_29)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_29>())).item
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_29),
            "::",
            stringify!(item)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_event_t__bindgen_ty_1__bindgen_ty_30 {
    pub item: *mut libvlc_renderer_item_t,
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1__bindgen_ty_30() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_30>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_30)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1__bindgen_ty_30>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_30)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1__bindgen_ty_30>())).item
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1__bindgen_ty_30),
            "::",
            stringify!(item)
        )
    );
}
#[test]
fn bindgen_test_layout_libvlc_event_t__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(libvlc_event_t__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(libvlc_event_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_meta_changed as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_meta_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_subitem_added
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_subitem_added)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_duration_changed
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_duration_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_parsed_changed
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_parsed_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_freed as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_freed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_state_changed
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_state_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_subitemtree_added
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_subitemtree_added)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_player_buffering
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_player_buffering)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_player_chapter_changed
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_player_chapter_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_player_position_changed
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_player_position_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_player_time_changed
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_player_time_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_player_title_changed
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_player_title_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_player_seekable_changed
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_player_seekable_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_player_pausable_changed
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_player_pausable_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_player_scrambled_changed
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_player_scrambled_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_player_vout as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_player_vout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_list_item_added
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_list_item_added)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_list_will_add_item
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_list_will_add_item)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_list_item_deleted
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_list_item_deleted)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_list_will_delete_item
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_list_will_delete_item)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>()))
                .media_list_player_next_item_set as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_list_player_next_item_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_player_snapshot_taken
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_player_snapshot_taken)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_player_length_changed
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_player_length_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).vlm_media_event as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(vlm_media_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_player_media_changed
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_player_media_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_player_es_changed
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_player_es_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_player_audio_volume
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_player_audio_volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).media_player_audio_device
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(media_player_audio_device)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>())).renderer_discoverer_item_added
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(renderer_discoverer_item_added)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_event_t__bindgen_ty_1>()))
                .renderer_discoverer_item_deleted as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t__bindgen_ty_1),
            "::",
            stringify!(renderer_discoverer_item_deleted)
        )
    );
}
#[test]
fn bindgen_test_layout_libvlc_event_t() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_event_t>(),
        32usize,
        concat!("Size of: ", stringify!(libvlc_event_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_event_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libvlc_event_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_event_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_event_t>())).p_obj as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t),
            "::",
            stringify!(p_obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_event_t>())).u as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_event_t),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_dialog_id {
    _unused: [u8; 0],
}
pub const libvlc_dialog_question_type_LIBVLC_DIALOG_QUESTION_NORMAL: libvlc_dialog_question_type =
    0;
pub const libvlc_dialog_question_type_LIBVLC_DIALOG_QUESTION_WARNING: libvlc_dialog_question_type =
    1;
pub const libvlc_dialog_question_type_LIBVLC_DIALOG_QUESTION_CRITICAL: libvlc_dialog_question_type =
    2;
pub type libvlc_dialog_question_type = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_dialog_cbs {
    pub pf_display_error: ::core::option::Option<
        unsafe extern "C" fn(
            p_data: *mut libc::c_void,
            psz_title: *const libc::c_char,
            psz_text: *const libc::c_char,
        ),
    >,
    pub pf_display_login: ::core::option::Option<
        unsafe extern "C" fn(
            p_data: *mut libc::c_void,
            p_id: *mut libvlc_dialog_id,
            psz_title: *const libc::c_char,
            psz_text: *const libc::c_char,
            psz_default_username: *const libc::c_char,
            b_ask_store: bool,
        ),
    >,
    pub pf_display_question: ::core::option::Option<
        unsafe extern "C" fn(
            p_data: *mut libc::c_void,
            p_id: *mut libvlc_dialog_id,
            psz_title: *const libc::c_char,
            psz_text: *const libc::c_char,
            i_type: libvlc_dialog_question_type,
            psz_cancel: *const libc::c_char,
            psz_action1: *const libc::c_char,
            psz_action2: *const libc::c_char,
        ),
    >,
    pub pf_display_progress: ::core::option::Option<
        unsafe extern "C" fn(
            p_data: *mut libc::c_void,
            p_id: *mut libvlc_dialog_id,
            psz_title: *const libc::c_char,
            psz_text: *const libc::c_char,
            b_indeterminate: bool,
            f_position: f32,
            psz_cancel: *const libc::c_char,
        ),
    >,
    pub pf_cancel: ::core::option::Option<
        unsafe extern "C" fn(p_data: *mut libc::c_void, p_id: *mut libvlc_dialog_id),
    >,
    pub pf_update_progress: ::core::option::Option<
        unsafe extern "C" fn(
            p_data: *mut libc::c_void,
            p_id: *mut libvlc_dialog_id,
            f_position: f32,
            psz_text: *const libc::c_char,
        ),
    >,
}
#[test]
fn bindgen_test_layout_libvlc_dialog_cbs() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_dialog_cbs>(),
        48usize,
        concat!("Size of: ", stringify!(libvlc_dialog_cbs))
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_dialog_cbs>(),
        8usize,
        concat!("Alignment of ", stringify!(libvlc_dialog_cbs))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_dialog_cbs>())).pf_display_error as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_dialog_cbs),
            "::",
            stringify!(pf_display_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_dialog_cbs>())).pf_display_login as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_dialog_cbs),
            "::",
            stringify!(pf_display_login)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_dialog_cbs>())).pf_display_question as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_dialog_cbs),
            "::",
            stringify!(pf_display_question)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_dialog_cbs>())).pf_display_progress as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_dialog_cbs),
            "::",
            stringify!(pf_display_progress)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_dialog_cbs>())).pf_cancel as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_dialog_cbs),
            "::",
            stringify!(pf_cancel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_dialog_cbs>())).pf_update_progress as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_dialog_cbs),
            "::",
            stringify!(pf_update_progress)
        )
    );
}
extern "C" {
    pub fn libvlc_dialog_set_callbacks(
        p_instance: *mut libvlc_instance_t,
        p_cbs: *const libvlc_dialog_cbs,
        p_data: *mut libc::c_void,
    );
}
extern "C" {
    pub fn libvlc_dialog_set_context(p_id: *mut libvlc_dialog_id, p_context: *mut libc::c_void);
}
extern "C" {
    pub fn libvlc_dialog_get_context(p_id: *mut libvlc_dialog_id) -> *mut libc::c_void;
}
extern "C" {
    pub fn libvlc_dialog_post_login(
        p_id: *mut libvlc_dialog_id,
        psz_username: *const libc::c_char,
        psz_password: *const libc::c_char,
        b_store: bool,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_dialog_post_action(
        p_id: *mut libvlc_dialog_id,
        i_action: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_dialog_dismiss(p_id: *mut libvlc_dialog_id) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_vlm_release(p_instance: *mut libvlc_instance_t);
}
extern "C" {
    pub fn libvlc_vlm_add_broadcast(
        p_instance: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
        psz_input: *const libc::c_char,
        psz_output: *const libc::c_char,
        i_options: libc::c_int,
        ppsz_options: *const *const libc::c_char,
        b_enabled: libc::c_int,
        b_loop: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_vlm_add_vod(
        p_instance: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
        psz_input: *const libc::c_char,
        i_options: libc::c_int,
        ppsz_options: *const *const libc::c_char,
        b_enabled: libc::c_int,
        psz_mux: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_vlm_del_media(
        p_instance: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_vlm_set_enabled(
        p_instance: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
        b_enabled: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_vlm_set_output(
        p_instance: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
        psz_output: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_vlm_set_input(
        p_instance: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
        psz_input: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_vlm_add_input(
        p_instance: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
        psz_input: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_vlm_set_loop(
        p_instance: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
        b_loop: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_vlm_set_mux(
        p_instance: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
        psz_mux: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_vlm_change_media(
        p_instance: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
        psz_input: *const libc::c_char,
        psz_output: *const libc::c_char,
        i_options: libc::c_int,
        ppsz_options: *const *const libc::c_char,
        b_enabled: libc::c_int,
        b_loop: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_vlm_play_media(
        p_instance: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_vlm_stop_media(
        p_instance: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_vlm_pause_media(
        p_instance: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_vlm_seek_media(
        p_instance: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
        f_percentage: f32,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_vlm_show_media(
        p_instance: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn libvlc_vlm_get_media_instance_position(
        p_instance: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
        i_instance: libc::c_int,
    ) -> f32;
}
extern "C" {
    pub fn libvlc_vlm_get_media_instance_time(
        p_instance: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
        i_instance: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_vlm_get_media_instance_length(
        p_instance: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
        i_instance: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_vlm_get_media_instance_rate(
        p_instance: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
        i_instance: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_vlm_get_event_manager(
        p_instance: *mut libvlc_instance_t,
    ) -> *mut libvlc_event_manager_t;
}
extern "C" {
    pub fn libvlc_media_player_get_fps(p_mi: *mut libvlc_media_player_t) -> f32;
}
extern "C" {
    pub fn libvlc_media_player_set_agl(p_mi: *mut libvlc_media_player_t, drawable: u32);
}
extern "C" {
    pub fn libvlc_media_player_get_agl(p_mi: *mut libvlc_media_player_t) -> u32;
}
extern "C" {
    pub fn libvlc_track_description_release(p_track_description: *mut libvlc_track_description_t);
}
extern "C" {
    pub fn libvlc_video_get_height(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_video_get_width(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_video_get_title_description(
        p_mi: *mut libvlc_media_player_t,
    ) -> *mut libvlc_track_description_t;
}
extern "C" {
    pub fn libvlc_video_get_chapter_description(
        p_mi: *mut libvlc_media_player_t,
        i_title: libc::c_int,
    ) -> *mut libvlc_track_description_t;
}
extern "C" {
    pub fn libvlc_video_set_subtitle_file(
        p_mi: *mut libvlc_media_player_t,
        psz_subtitle: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_toggle_teletext(p_mi: *mut libvlc_media_player_t);
}
extern "C" {
    pub fn libvlc_audio_output_device_count(
        p_instance: *mut libvlc_instance_t,
        psz_audio_output: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_audio_output_device_longname(
        p_instance: *mut libvlc_instance_t,
        psz_output: *const libc::c_char,
        i_device: libc::c_int,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn libvlc_audio_output_device_id(
        p_instance: *mut libvlc_instance_t,
        psz_audio_output: *const libc::c_char,
        i_device: libc::c_int,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn libvlc_audio_output_get_device_type(p_mi: *mut libvlc_media_player_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_audio_output_set_device_type(
        p_mp: *mut libvlc_media_player_t,
        device_type: libc::c_int,
    );
}
extern "C" {
    pub fn libvlc_media_parse(p_md: *mut libvlc_media_t);
}
extern "C" {
    pub fn libvlc_media_parse_async(p_md: *mut libvlc_media_t);
}
extern "C" {
    pub fn libvlc_media_is_parsed(p_md: *mut libvlc_media_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_get_tracks_info(
        p_md: *mut libvlc_media_t,
        tracks: *mut *mut libvlc_media_track_info_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_list_add_file_content(
        p_ml: *mut libvlc_media_list_t,
        psz_uri: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_media_discoverer_new_from_name(
        p_inst: *mut libvlc_instance_t,
        psz_name: *const libc::c_char,
    ) -> *mut libvlc_media_discoverer_t;
}
extern "C" {
    pub fn libvlc_media_discoverer_localized_name(
        p_mdis: *mut libvlc_media_discoverer_t,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn libvlc_media_discoverer_event_manager(
        p_mdis: *mut libvlc_media_discoverer_t,
    ) -> *mut libvlc_event_manager_t;
}
extern "C" {
    pub fn libvlc_wait(p_instance: *mut libvlc_instance_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_log_iterator_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libvlc_log_message_t {
    pub i_severity: libc::c_int,
    pub psz_type: *const libc::c_char,
    pub psz_name: *const libc::c_char,
    pub psz_header: *const libc::c_char,
    pub psz_message: *const libc::c_char,
}
#[test]
fn bindgen_test_layout_libvlc_log_message_t() {
    assert_eq!(
        ::core::mem::size_of::<libvlc_log_message_t>(),
        40usize,
        concat!("Size of: ", stringify!(libvlc_log_message_t))
    );
    assert_eq!(
        ::core::mem::align_of::<libvlc_log_message_t>(),
        8usize,
        concat!("Alignment of ", stringify!(libvlc_log_message_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_log_message_t>())).i_severity as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_log_message_t),
            "::",
            stringify!(i_severity)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_log_message_t>())).psz_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_log_message_t),
            "::",
            stringify!(psz_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<libvlc_log_message_t>())).psz_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_log_message_t),
            "::",
            stringify!(psz_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_log_message_t>())).psz_header as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_log_message_t),
            "::",
            stringify!(psz_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<libvlc_log_message_t>())).psz_message as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(libvlc_log_message_t),
            "::",
            stringify!(psz_message)
        )
    );
}
extern "C" {
    pub fn libvlc_get_log_verbosity(p_instance: *const libvlc_instance_t) -> libc::c_uint;
}
extern "C" {
    pub fn libvlc_set_log_verbosity(p_instance: *mut libvlc_instance_t, level: libc::c_uint);
}
extern "C" {
    pub fn libvlc_log_open(p_instance: *mut libvlc_instance_t) -> *mut libvlc_log_t;
}
extern "C" {
    pub fn libvlc_log_close(p_log: *mut libvlc_log_t);
}
extern "C" {
    pub fn libvlc_log_count(p_log: *const libvlc_log_t) -> libc::c_uint;
}
extern "C" {
    pub fn libvlc_log_clear(p_log: *mut libvlc_log_t);
}
extern "C" {
    pub fn libvlc_log_get_iterator(p_log: *const libvlc_log_t) -> *mut libvlc_log_iterator_t;
}
extern "C" {
    pub fn libvlc_log_iterator_free(p_iter: *mut libvlc_log_iterator_t);
}
extern "C" {
    pub fn libvlc_log_iterator_has_next(p_iter: *const libvlc_log_iterator_t) -> libc::c_int;
}
extern "C" {
    pub fn libvlc_log_iterator_next(
        p_iter: *mut libvlc_log_iterator_t,
        p_buf: *mut libvlc_log_message_t,
    ) -> *mut libvlc_log_message_t;
}
extern "C" {
    pub fn libvlc_playlist_play(
        p_instance: *mut libvlc_instance_t,
        i_id: libc::c_int,
        i_options: libc::c_int,
        ppsz_options: *mut *mut libc::c_char,
    );
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: libc::c_uint,
    pub fp_offset: libc::c_uint,
    pub overflow_arg_area: *mut libc::c_void,
    pub reg_save_area: *mut libc::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::core::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::core::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
